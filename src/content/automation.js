const AUTOMATION_LOG_PREFIX = '[AutomationSim]';

// Nova fun√ß√£o para enviar logs para o sistema centralizado (via background.js)
function sendToLogSystem(message, level = 'INFO') {
    try {
        chrome.runtime.sendMessage({
            action: 'addLog',
            logMessage: message,
            level: level,
            source: 'automation.js' // Fonte expl√≠cita
        });
    } catch (error) {
        // Fallback para console.warn APENAS se o envio da mensagem falhar
        console.warn(`${AUTOMATION_LOG_PREFIX} Falha cr√≠tica ao enviar log para o sistema central: "${message}". Erro: ${error.message}`);
    }
}

// Fun√ß√£o padronizada para enviar status para o index
function toUpdateStatus(message, type = 'info', duration = 5000) {
    if (chrome && chrome.runtime && chrome.runtime.id) {
        chrome.runtime.sendMessage({
            action: 'updateStatus',
            message: message,
            type: type,
            duration: duration
        });
    }
}

// ======================================================================
// =================== SISTEMA DE TROCA DE ATIVOS (INTEGRA√á√ÉO) =========
// ======================================================================

/**
 * Wrapper para trocar para o melhor ativo usando a API centralizada
 * @param {number} minPayout - Payout m√≠nimo desejado (padr√£o: 85%)
 * @param {string} preferredCategory - Categoria preferida ('crypto', 'currency', etc.)
 * @returns {Promise<Object>} Resultado da opera√ß√£o
 */
async function switchToBestAssetViaAPI(minPayout = 85, preferredCategory = 'crypto') {
    try {
        sendToLogSystem(`üîÑ [AUTOMATION] Solicitando troca de ativo via nova API robusta (payout >= ${minPayout}%, categoria: ${preferredCategory})`, 'INFO');
        toUpdateStatus(`Procurando melhor ativo (>=${minPayout}%)...`, 'info', 3000);
        
        // ‚úÖ USAR NOVA FUN√á√ÉO WRAPPER ESPEC√çFICA PARA AUTOMA√á√ÉO
        // A nova fun√ß√£o j√° faz todo o logging detalhado e busca sequencial
        const result = await AssetManager.switchToBestAssetForAutomation(minPayout, preferredCategory);
        
        if (result.success) {
            // ‚úÖ A nova fun√ß√£o j√° faz todo o logging necess√°rio
            // Apenas atualizar status visual para o usu√°rio
            if (result.wasPreferred) {
                toUpdateStatus(`‚úÖ ${result.asset.name} (${result.asset.payout}%)`, 'success', 4000);
            } else {
                toUpdateStatus(`‚ö†Ô∏è Fallback: ${result.asset.name} (${result.asset.payout}%)`, 'warn', 5000);
            }
            
            return result;
        } else {
            // ‚ùå ERRO REAL: A nova fun√ß√£o j√° logou o erro
            const errorMsg = result.error || 'UNKNOWN_ERROR: Falha na troca de ativo';
            toUpdateStatus(errorMsg, 'error', 5000);
            throw new Error(errorMsg);
        }
        
    } catch (error) {
        const errorMsg = `AUTOMATION_API_ERROR: ${error.message}`;
        sendToLogSystem(`‚ùå [AUTOMATION] ${errorMsg}`, 'ERROR');
        toUpdateStatus(errorMsg, 'error', 5000);
        throw error;
    }
}

// ======================================================================
// =================== SISTEMA DE MONITORAMENTO CONT√çNUO ===============
// ======================================================================

/**
 * Sistema de monitoramento cont√≠nuo de payout durante automa√ß√£o ativa
 * DESABILITADO: Monitoramento cont√≠nuo removido para evitar problemas de performance
 * O payout ser√° verificado apenas no momento da an√°lise
 */
let payoutMonitoringInterval = null;
let isPayoutMonitoringActive = false;

/**
 * Iniciar monitoramento cont√≠nuo de payout
 * FUN√á√ÉO DESABILITADA: N√£o faz mais monitoramento cont√≠nuo
 */
function startPayoutMonitoring() {
    sendToLogSystem('‚ÑπÔ∏è Monitoramento cont√≠nuo de payout est√° DESABILITADO. Payout ser√° verificado apenas durante an√°lises.', 'INFO');
    isPayoutMonitoringActive = false;
    // N√£o iniciar mais o monitoramento cont√≠nuo
}

/**
 * Parar monitoramento cont√≠nuo de payout
 */
function stopPayoutMonitoring() {
    if (payoutMonitoringInterval) {
        clearInterval(payoutMonitoringInterval);
        payoutMonitoringInterval = null;
        sendToLogSystem('üõë Monitoramento cont√≠nuo de payout parado', 'INFO');
    }
    isPayoutMonitoringActive = false;
}

/**
 * Tratar problema de payout detectado durante monitoramento
 */
async function handlePayoutIssue(currentPayout, minPayoutRequired, payoutBehavior, config) {
    sendToLogSystem(`üö® Tratando problema de payout: ${currentPayout}% < ${minPayoutRequired}%, comportamento: ${payoutBehavior}`, 'INFO');
    
    switch (payoutBehavior) {
        case 'cancel':
            sendToLogSystem(`‚ùå Cancelando automa√ß√£o devido a payout inadequado (${currentPayout}% < ${minPayoutRequired}%)`, 'WARN');
            toUpdateStatus(`Automa√ß√£o cancelada: payout inadequado (${currentPayout}%)`, 'error', 8000);
            
            // Cancelar opera√ß√£o atual
            if (typeof window.cancelCurrentOperation === 'function') {
                window.cancelCurrentOperation(`Payout inadequado: ${currentPayout}% < ${minPayoutRequired}%`);
            }
            break;
            
        case 'wait':
            sendToLogSystem(`‚è≥ Pausando automa√ß√£o at√© payout melhorar (${currentPayout}% ‚Üí ${minPayoutRequired}%)`, 'INFO');
            toUpdateStatus(`Aguardando payout melhorar: ${currentPayout}% ‚Üí ${minPayoutRequired}%`, 'info', 0);
            
            // Iniciar monitoramento de espera
            await waitForPayoutImprovement(minPayoutRequired, 10, 
                () => {
                    sendToLogSystem('‚úÖ Payout melhorou! Retomando automa√ß√£o...', 'SUCCESS');
                    toUpdateStatus('Payout adequado! Retomando automa√ß√£o...', 'success', 3000);
                    
                    // Monitoramento cont√≠nuo desabilitado - payout ser√° verificado na pr√≥xima an√°lise
                },
                (error) => {
                    if (error === 'USER_CANCELLED') {
                        sendToLogSystem('üõë Aguardo de payout cancelado pelo usu√°rio', 'INFO');
                        toUpdateStatus('Aguardo cancelado', 'info', 3000);
                    } else {
                        sendToLogSystem(`‚ùå Erro durante aguardo de payout: ${error}`, 'ERROR');
                    }
                }
            );
            break;
            
                        case 'switch':
                    sendToLogSystem(`üîÑ Trocando ativo devido a payout inadequado (${currentPayout}% < ${minPayoutRequired}%)`, 'INFO');
                    toUpdateStatus(`Trocando ativo: payout inadequado (${currentPayout}%)`, 'warn', 4000);
                    
                    try {
                        const assetConfig = config.assetSwitching || {};
                        const preferredCategory = assetConfig.preferredCategory || 'crypto';
                        
                        const assetResult = await switchToBestAssetViaAPI(minPayoutRequired, preferredCategory);
                        
                        if (assetResult.success) {
                            sendToLogSystem(`‚úÖ Ativo trocado com sucesso: ${assetResult.message}`, 'SUCCESS');
                            toUpdateStatus(`Ativo trocado: ${assetResult.message}`, 'success', 4000);
                            
                            // ‚úÖ CORRE√á√ÉO: Resolver promise para continuar fluxo de an√°lise
                            sendToLogSystem(`üéØ Troca de ativo conclu√≠da com sucesso. Fluxo pode prosseguir para an√°lise.`, 'INFO');
                            resolve(true);
                        } else {
                            sendToLogSystem(`‚ùå Falha na troca de ativo: ${assetResult.error}`, 'ERROR');
                            toUpdateStatus(`Erro na troca de ativo: ${assetResult.error}`, 'error', 5000);
                            
                            // Rejeitar promise com erro espec√≠fico
                            reject(`ASSET_SWITCH_FAILED: ${assetResult.error}`);
                        }
                    } catch (error) {
                        sendToLogSystem(`‚ùå Erro durante troca de ativo: ${error.message}`, 'ERROR');
                        toUpdateStatus(`Erro na troca de ativo: ${error.message}`, 'error', 5000);
                        
                        // Rejeitar promise com erro
                        reject(`ASSET_SWITCH_ERROR: ${error.message}`);
                    }
            break;
            
        default:
            sendToLogSystem(`‚ùå Comportamento de payout desconhecido: ${payoutBehavior}`, 'ERROR');
            toUpdateStatus(`Erro: comportamento desconhecido (${payoutBehavior})`, 'error', 5000);
    }
}

// ======================================================================
// =================== INTEGRA√á√ÉO COM SISTEMA DE AUTOMA√á√ÉO =============
// ======================================================================

/**
 * Fun√ß√£o principal para executar opera√ß√£o com verifica√ß√£o autom√°tica de ativo
 * @param {string} action - A√ß√£o a ser executada (BUY/SELL)
 * @param {Object} config - Configura√ß√µes da opera√ß√£o
 * @param {boolean} autoSwitchAsset - Se deve trocar ativo automaticamente
 * @returns {Promise<Object>} Resultado da opera√ß√£o
 */
async function executeTradeWithAssetCheck(action, config = {}, autoSwitchAsset = true) {
    return safeExecuteAutomation(async () => {
        // Verificar se a troca autom√°tica de ativos est√° habilitada
        if (autoSwitchAsset && window.StateManager?.isAssetSwitchingEnabled()) {
            const minPayout = window.StateManager.getMinPayoutForAssets();
            const preferredCategory = window.StateManager.getPreferredAssetCategory();
            
            sendToLogSystem(`Verificando ativo antes da opera√ß√£o (min payout: ${minPayout}%, categoria: ${preferredCategory})`, 'INFO');
            
            try {
                // Garantir que estamos no melhor ativo usando API centralizada
                await switchToBestAssetViaAPI(minPayout, preferredCategory);
            } catch (assetError) {
                // ‚ùå ERRO REAL: Nenhum ativo encontrado em nenhuma categoria
                sendToLogSystem(`Erro ao verificar/trocar ativo: ${assetError.message}`, 'ERROR');
                throw new Error(`Falha na verifica√ß√£o de ativo: ${assetError.message}`);
            }
        }
        
        // Executar a opera√ß√£o de trade
        try {
            const result = await chrome.runtime.sendMessage({
                action: 'EXECUTE_TRADE_ACTION',
                tradeAction: action,
                tradeData: config,
                source: 'automation'
            });
            
            if (!result || !result.success) {
                throw new Error(result?.error || 'Falha na execu√ß√£o do trade');
            }
            
            sendToLogSystem(`Trade executado com sucesso: ${action}`, 'SUCCESS');
            return result;
        } catch (tradeError) {
            sendToLogSystem(`Erro ao executar trade: ${tradeError.message}`, 'ERROR');
            throw tradeError;
        }
    }, 'executeTradeWithAssetCheck', action, config, autoSwitchAsset);
}

/**
 * Fun√ß√£o para executar an√°lise com verifica√ß√£o autom√°tica de ativo
 * @param {Object} config - Configura√ß√µes da an√°lise
 * @returns {Promise<Object>} Resultado da an√°lise e opera√ß√£o
 */
async function executeAnalysisWithAssetCheck(config = {}) {
    return safeExecuteAutomation(async () => {
        const autoSwitchAsset = config.autoSwitchAsset !== false; // default true
        
        // Verificar se a troca autom√°tica de ativos est√° habilitada
        if (autoSwitchAsset && window.StateManager?.isAssetSwitchingEnabled()) {
            const minPayout = window.StateManager.getMinPayoutForAssets();
            const preferredCategory = window.StateManager.getPreferredAssetCategory();
            
            sendToLogSystem(`Verificando ativo antes da an√°lise (min payout: ${minPayout}%, categoria: ${preferredCategory})`, 'INFO');
            
            try {
                // Garantir que estamos no melhor ativo usando API centralizada
                await switchToBestAssetViaAPI(minPayout, preferredCategory);
            } catch (assetError) {
                sendToLogSystem(`Erro ao verificar/trocar ativo: ${assetError.message}`, 'ERROR');
                // Para an√°lise, n√£o interromper se falhar ao trocar ativo
                sendToLogSystem('Continuando an√°lise com ativo atual', 'WARN');
            }
        }
        
        // Executar a an√°lise
        try {
            const result = await chrome.runtime.sendMessage({
                action: 'START_ANALYSIS',
                source: 'automation',
                config: config
            });
            
            if (!result || !result.success) {
                throw new Error(result?.error || 'Falha na an√°lise');
            }
            
            sendToLogSystem('An√°lise executada com sucesso', 'SUCCESS');
            return result;
        } catch (analysisError) {
            sendToLogSystem(`Erro ao executar an√°lise: ${analysisError.message}`, 'ERROR');
            throw analysisError;
        }
    }, 'executeAnalysisWithAssetCheck', config);
}

// Wrapper para obter payout atual usando a API centralizada
async function getCurrentPayoutForAutomation() {
    // Usar o PayoutController se dispon√≠vel (m√©todo preferido)
    if (window.PayoutController && typeof window.PayoutController.getCurrentPayout === 'function') {
        sendToLogSystem('üîÑ [Automation] Usando PayoutController para obter payout', 'DEBUG');
        return window.PayoutController.getCurrentPayout();
    }
    
    // Fallback: usar a mesma API que o painel de desenvolvimento
    sendToLogSystem('üîÑ [Automation] PayoutController n√£o dispon√≠vel, usando API via chrome.runtime', 'DEBUG');
    return new Promise((resolve, reject) => {
        try {
            // Timeout de seguran√ßa
            const timeoutId = setTimeout(() => {
                const errorMsg = 'Timeout: Solicita√ß√£o de payout demorou mais de 8 segundos';
                sendToLogSystem(errorMsg, 'ERROR');
                reject(new Error(errorMsg));
            }, 8000);
            
            // Usar a mesma API que o painel de desenvolvimento usa
            chrome.runtime.sendMessage({
                action: 'GET_CURRENT_PAYOUT'
            }, (response) => {
                clearTimeout(timeoutId);
                
                if (chrome.runtime.lastError) {
                    const errorMsg = `Erro de comunica√ß√£o: ${chrome.runtime.lastError.message}`;
                    sendToLogSystem(errorMsg, 'ERROR');
                    reject(new Error(errorMsg));
                    return;
                }
                
                if (!response || !response.success) {
                    const errorMsg = response?.error || 'Erro ao obter payout';
                    sendToLogSystem(errorMsg, 'ERROR');
                    reject(new Error(errorMsg));
                    return;
                }
                
                sendToLogSystem(`‚úÖ Payout capturado: ${response.payout}%`, 'SUCCESS');
                resolve({ success: true, payout: response.payout });
            });
            
        } catch (error) {
            sendToLogSystem(`Erro ao solicitar payout: ${error.message}`, 'ERROR');
            reject(error);
        }
    });
}

// Wrapper para verificar payout antes de an√°lise usando a API centralizada
async function checkPayoutBeforeAnalysisForAutomation() {
    // Usar o PayoutController se dispon√≠vel (m√©todo preferido)
    if (window.PayoutController && typeof window.PayoutController.checkPayoutBeforeAnalysis === 'function') {
        sendToLogSystem('üîÑ [Automation] Usando PayoutController para verifica√ß√£o de payout', 'DEBUG');
        return window.PayoutController.checkPayoutBeforeAnalysis();
    }
    
    // Fallback: continuar sem verifica√ß√£o (sistema legado)
    sendToLogSystem('‚ö†Ô∏è [Automation] PayoutController n√£o dispon√≠vel, continuando sem verifica√ß√£o de payout', 'WARN');
    return new Promise((resolve) => {
        sendToLogSystem('Verifica√ß√£o de payout ignorada - PayoutController n√£o carregado', 'WARN');
        resolve(true); // Continuar sem verifica√ß√£o
    });
}

/**
 * Aplicar comportamento de payout configurado diretamente
 * @param {number} currentPayout - Payout atual detectado
 * @param {number} minPayoutRequired - Payout m√≠nimo configurado
 * @param {string} payoutBehavior - Comportamento configurado ('cancel', 'wait', 'switch')
 * @param {Object} config - Configura√ß√µes completas do usu√°rio
 * @returns {Promise} Resolve se comportamento executado com sucesso, reject se falhar
 */
async function applyPayoutBehavior(currentPayout, minPayoutRequired, payoutBehavior, config) {
    return new Promise(async (resolve, reject) => {
        try {
            sendToLogSystem(`üîß Aplicando comportamento de payout: ${payoutBehavior} (${currentPayout}% < ${minPayoutRequired}%)`, 'INFO');
            
            switch (payoutBehavior) {
                case 'wait':
                    sendToLogSystem(`‚è≥ Aguardando payout melhorar (${currentPayout}% ‚Üí ${minPayoutRequired}%)`, 'INFO');
                    toUpdateStatus(`Aguardando payout melhorar: ${currentPayout}% ‚Üí ${minPayoutRequired}%`, 'info', 0);
                    
                    // Usar PayoutController para aguardar se dispon√≠vel
                    if (window.PayoutController && typeof window.PayoutController.waitForPayoutImprovement === 'function') {
                        sendToLogSystem('üîÑ Usando PayoutController.waitForPayoutImprovement', 'DEBUG');
                        
                        const checkInterval = parseInt(config.payoutTimeout) || 5;
                        window.PayoutController.waitForPayoutImprovement(
                            minPayoutRequired, 
                            checkInterval, 
                            () => {
                                sendToLogSystem('‚úÖ Payout melhorou! Retomando automa√ß√£o...', 'SUCCESS');
                                toUpdateStatus('Payout adequado! Retomando automa√ß√£o...', 'success', 3000);
                                resolve(true);
                            },
                            (error) => {
                                if (error === 'USER_CANCELLED') {
                                    sendToLogSystem('üõë Aguardo de payout cancelado pelo usu√°rio', 'INFO');
                                    toUpdateStatus('Aguardo cancelado', 'info', 3000);
                                    reject('USER_CANCELLED');
                                } else {
                                    sendToLogSystem(`‚ùå Erro durante aguardo de payout: ${error}`, 'ERROR');
                                    reject(error);
                                }
                            }
                        );
                    } else {
                        // Fallback: aguardo simples
                        sendToLogSystem('‚ö†Ô∏è PayoutController n√£o dispon√≠vel, usando aguardo simples', 'WARN');
                        setTimeout(() => {
                            sendToLogSystem('‚è∞ Aguardo simples conclu√≠do, prosseguindo...', 'INFO');
                            resolve(true);
                        }, 10000); // 10 segundos de aguardo simples
                    }
                    break;
                    
                case 'switch':
                    sendToLogSystem(`üîÑ Trocando ativo devido a payout inadequado (${currentPayout}% < ${minPayoutRequired}%)`, 'INFO');
                    toUpdateStatus(`Trocando ativo: payout inadequado (${currentPayout}%)`, 'warn', 4000);
                    
                    try {
                        const assetConfig = config.assetSwitching || {};
                        const preferredCategory = assetConfig.preferredCategory || 'crypto';
                        
                        // Usar a fun√ß√£o existente do painel de desenvolvimento
                        sendToLogSystem(`üîÑ Chamando TEST_SWITCH_TO_BEST_ASSET via chrome.runtime (categoria: ${preferredCategory})`, 'DEBUG');
                        
                        chrome.runtime.sendMessage({
                            action: 'TEST_SWITCH_TO_BEST_ASSET',
                            minPayout: minPayoutRequired,
                            category: preferredCategory
                        }, (response) => {
                            if (chrome.runtime.lastError) {
                                const errorMsg = `Erro na comunica√ß√£o para troca de ativo: ${chrome.runtime.lastError.message}`;
                                sendToLogSystem(errorMsg, 'ERROR');
                                toUpdateStatus(errorMsg, 'error', 5000);
                                reject(`ASSET_SWITCH_COMMUNICATION_ERROR: ${errorMsg}`);
                                return;
                            }
                            
                            if (response && response.success) {
                                const successMsg = `Ativo trocado com sucesso: ${response.asset?.name || 'Novo ativo'} (${response.asset?.payout || 'N/A'}%)`;
                                sendToLogSystem(successMsg, 'SUCCESS');
                                toUpdateStatus(successMsg, 'success', 4000);
                                
                                // Aguardar um pouco para a interface atualizar
                                setTimeout(() => {
                                    sendToLogSystem('‚úÖ Troca de ativo conclu√≠da, prosseguindo com an√°lise', 'SUCCESS');
                                    resolve(true);
                                }, 2000);
                            } else {
                                const errorMsg = response?.error || 'Falha na troca de ativo';
                                sendToLogSystem(`‚ùå Falha na troca de ativo: ${errorMsg}`, 'ERROR');
                                toUpdateStatus(`Erro na troca de ativo: ${errorMsg}`, 'error', 5000);
                                reject(`ASSET_SWITCH_FAILED: ${errorMsg}`);
                            }
                        });
                        
                    } catch (error) {
                        sendToLogSystem(`‚ùå Erro durante troca de ativo: ${error.message}`, 'ERROR');
                        toUpdateStatus(`Erro na troca de ativo: ${error.message}`, 'error', 5000);
                        reject(`ASSET_SWITCH_ERROR: ${error.message}`);
                    }
                    break;
                    
                default:
                    sendToLogSystem(`‚ùå Comportamento de payout desconhecido: ${payoutBehavior}`, 'ERROR');
                    toUpdateStatus(`Erro: comportamento desconhecido (${payoutBehavior})`, 'error', 5000);
                    reject(`UNKNOWN_BEHAVIOR: ${payoutBehavior}`);
            }
            
        } catch (error) {
            sendToLogSystem(`‚ùå Erro cr√≠tico na aplica√ß√£o do comportamento de payout: ${error.message}`, 'ERROR');
            reject(`CRITICAL_ERROR: ${error.message}`);
        }
    });
}

// Fun√ß√£o auxiliar para aguardar melhora do payout - DELEGADA PARA PayoutController
function waitForPayoutImprovement(minPayout, checkInterval, resolve, reject) {
    // Usar o PayoutController se dispon√≠vel
    if (window.PayoutController && typeof window.PayoutController.waitForPayoutImprovement === 'function') {
        sendToLogSystem('Delegando aguardo de payout para PayoutController', 'DEBUG');
        return window.PayoutController.waitForPayoutImprovement(minPayout, checkInterval, resolve, reject);
    }
    
    // Fallback: implementa√ß√£o b√°sica
    sendToLogSystem('PayoutController n√£o dispon√≠vel para aguardo de payout, resolvendo imediatamente', 'WARN');
    resolve(true);
}

// Fun√ß√£o para cancelar monitoramento de payout - DELEGADA PARA PayoutController
function cancelPayoutMonitoring() {
    // Usar o PayoutController se dispon√≠vel
    if (window.PayoutController && typeof window.PayoutController.cancelPayoutMonitoring === 'function') {
        sendToLogSystem('Delegando cancelamento de payout para PayoutController', 'DEBUG');
        return window.PayoutController.cancelPayoutMonitoring();
    }
    
    // Fallback: implementa√ß√£o b√°sica
    sendToLogSystem('PayoutController n√£o dispon√≠vel, usando implementa√ß√£o b√°sica de cancelamento', 'WARN');
    chrome.storage.local.set({ cancelPayoutWait: true }, () => {
        sendToLogSystem('Sinal de cancelamento de monitoramento enviado via chrome.storage', 'INFO');
        toUpdateStatus('Cancelando monitoramento de payout...', 'info', 3000);
    });
}

// Exportar fun√ß√£o via chrome.runtime para acesso externo
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.action === 'cancelPayoutMonitoring') {
        cancelPayoutMonitoring();
        sendResponse({ success: true });
        return true;
    }
    
    // *** NOVO: Handler para parar monitoramento cont√≠nuo ***
    if (message.action === 'STOP_PAYOUT_MONITORING') {
        sendToLogSystem(`üõë Recebido comando para parar monitoramento cont√≠nuo: ${message.reason}`, 'INFO');
        stopPayoutMonitoring();
        sendResponse({ success: true, message: 'Monitoramento cont√≠nuo parado' });
        return true;
    }
});

(function() {
    sendToLogSystem('M√≥dulo de Automa√ß√£o INICIANDO.', 'DEBUG');

    let analyzeBtn = null; // Refer√™ncia ao bot√£o de an√°lise
    let startOperationBtn = null; // Refer√™ncia ao bot√£o de iniciar opera√ß√£o autom√°tica
  
    // Fun√ß√£o para enviar status para o campo de status GLOBAL via index.js
    function updateUserVisibleStatus(text, level = 'info', duration = 5000) {
        sendToLogSystem(`Solicitando atualiza√ß√£o de status GLOBAL para index.js (via action:updateStatus): "${text}" (${level})`, 'DEBUG');
        chrome.runtime.sendMessage({
            action: 'updateStatus', // Alterado de type: 'REQUEST_INDEX_DIRECT_UPDATE_STATUS'
            message: text,       // Mapeado de text para message
            type: level,         // Mapeado de level para type
            duration: duration
        }, response => {
            if (chrome.runtime.lastError) {
                sendToLogSystem(`Erro ao enviar status (action:updateStatus) para index.js: ${chrome.runtime.lastError.message}`, 'ERROR');
            } else if (response && !response.success) {
                sendToLogSystem(`index.js reportou falha ao processar atualiza√ß√£o de status (action:updateStatus).`, 'WARN');
            }
        });
    }

    // Fun√ß√£o principal do ciclo de automa√ß√£o (reutiliz√°vel)
    function runAutomationCheck() {
        sendToLogSystem('runAutomationCheck: Iniciando ciclo de verifica√ß√£o.', 'INFO');
        toUpdateStatus('Automa√ß√£o: Verificando configura√ß√µes e lucro...', 'info', 0); // 0 para n√£o desaparecer

        // *** NOVO: Inicializar LimitsChecker se ainda n√£o estiver ativo ***
        if (window.limitsChecker && !window.limitsChecker.getStatus().isActive) {
            chrome.storage.sync.get(['userConfig'], (result) => {
                const config = result.userConfig || {};
                window.limitsChecker.start(config);
                sendToLogSystem('LimitsChecker iniciado automaticamente pela automa√ß√£o', 'INFO');
            });
        }

        // 1. Obter configura√ß√£o
        chrome.storage.sync.get(['userConfig'], (storageResult) => {
            if (chrome.runtime.lastError) {
                const errorMsg = `Falha ao ler userConfig do storage sync: ${chrome.runtime.lastError.message}`;
                sendToLogSystem(errorMsg, 'ERROR');
                toUpdateStatus(errorMsg, 'error');
                return;
            }

            const config = storageResult.userConfig || {};
            sendToLogSystem(`runAutomationCheck: Config lida: ${JSON.stringify(config)}`, 'DEBUG');

            // *** Verificar se a automa√ß√£o est√° ativa ***
            if (!config.automation) {
                const msg = "Modo automatico desativado.";
                sendToLogSystem(msg, 'WARN');
                toUpdateStatus(msg, 'warn');
                
                // Parar monitoramento se automa√ß√£o estiver desativada
                if (isPayoutMonitoringActive) {
                    stopPayoutMonitoring();
                }
                
                return; // Interrompe se desligada
            }

            const dailyProfitTarget = parseFloat(config.dailyProfit) || 0;

            // 2. Obter hist√≥rico e calcular lucro
            let currentProfit = 0;
            try {
                const savedOperations = localStorage.getItem('tradeOperations');
                if (savedOperations) {
                    const operations = JSON.parse(savedOperations);
                    operations.forEach(op => {
                        if (op.status === 'Closed') {
                            if (op.success) { currentProfit += parseFloat(op.profit || 0); }
                            else { currentProfit -= parseFloat(op.amount || 0); }
                        }
                    });
                    currentProfit = parseFloat(currentProfit.toFixed(2));
                    sendToLogSystem(`runAutomationCheck: Lucro calculado: ${currentProfit}`, 'DEBUG');
                } else {
                     sendToLogSystem('runAutomationCheck: Nenhum hist√≥rico localStorage. Lucro 0.', 'WARN');
                    currentProfit = 0;
                }
            } catch (e) {
                const errorMsg = `Erro ao calcular lucro: ${e.message}`;
                sendToLogSystem(errorMsg, 'ERROR');
                toUpdateStatus(errorMsg, 'error');
                return;
            }

            // 3. Comparar e agir
            sendToLogSystem(`runAutomationCheck: Comparando Lucro(${currentProfit}) vs Meta(${dailyProfitTarget})`, 'INFO');
            if (isNaN(currentProfit) || isNaN(dailyProfitTarget)) {
                 const errorMsg = 'Valores de lucro inv√°lidos.';
                 sendToLogSystem(errorMsg, 'ERROR');
                 toUpdateStatus(errorMsg, 'error');
                return;
            }

            // *** DEBUG: Log detalhado da compara√ß√£o ***
            sendToLogSystem(`üîç [COMPARA√á√ÉO DETALHADA] Lucro atual: ${currentProfit} (${typeof currentProfit}) vs Meta: ${dailyProfitTarget} (${typeof dailyProfitTarget})`, 'DEBUG');
            sendToLogSystem(`üîç [COMPARA√á√ÉO DETALHADA] currentProfit < dailyProfitTarget? ${currentProfit < dailyProfitTarget}`, 'DEBUG');
            sendToLogSystem(`üîç [COMPARA√á√ÉO DETALHADA] currentProfit >= dailyProfitTarget? ${currentProfit >= dailyProfitTarget}`, 'DEBUG');

            // *** CORRE√á√ÉO: Stop Loss ser√° verificado pelo LimitsChecker ***
            // O LimitsChecker agora gerencia isso automaticamente
            const stopLossLimit = parseFloat(config.stopLoss) || 0;
            if (stopLossLimit > 0) {
                sendToLogSystem(`Stop Loss configurado: ${stopLossLimit} - LimitsChecker monitora automaticamente`, 'DEBUG');
            }
            
            if (currentProfit < dailyProfitTarget) {
                sendToLogSystem(`üü° [CONDI√á√ÉO] Lucro ainda n√£o atingiu meta. Prosseguindo com automa√ß√£o...`, 'INFO');
                const conditionMsg = `Automa√ß√£o: Condi√ß√£o atendida (${currentProfit} < ${dailyProfitTarget}). Verificando payout atual...`;
                sendToLogSystem(conditionMsg, 'INFO');
                toUpdateStatus('Automa√ß√£o: Verificando payout atual...', 'info', 3000);
                
                // *** CORRE√á√ÉO: Obter configura√ß√µes de payout diretamente do config ***
                // O payoutBehavior define o comportamento, n√£o apenas assetSwitching.enabled
                const minPayoutRequired = parseFloat(config.minPayout) || 80;
                const payoutBehavior = config.payoutBehavior || 'wait';
                
                // Log da configura√ß√£o de payout para debug
                sendToLogSystem(`üîß [runAutomationCheck] Configura√ß√£o de payout: minimo=${minPayoutRequired}%, comportamento=${payoutBehavior}`, 'DEBUG');
                
                // *** L√ìGICA CORRIGIDA: Verificar payout atual ANTES de decidir trocar ***
                sendToLogSystem(`üîç Verificando payout atual (m√≠nimo: ${minPayoutRequired}%)...`, 'INFO');
                sendToLogSystem(`üîç [DEBUG] Chamando getCurrentPayout()...`, 'DEBUG');
                
                getCurrentPayoutForAutomation()
                    .then(async (payoutResult) => {
                        const currentPayout = payoutResult.payout;
                        sendToLogSystem(`‚úÖ Payout atual capturado: ${currentPayout}% (m√≠nimo: ${minPayoutRequired}%)`, 'INFO');
                        
                        if (currentPayout >= minPayoutRequired) {
                            // ‚úÖ PAYOUT ADEQUADO - Prosseguir diretamente com an√°lise
                            sendToLogSystem(`‚úÖ Payout adequado (${currentPayout}% >= ${minPayoutRequired}%). Iniciando an√°lise diretamente...`, 'SUCCESS');
                            toUpdateStatus(`Payout OK (${currentPayout}%)! Iniciando an√°lise...`, 'success', 3000);
                            
                            // Clicar no bot√£o de an√°lise IMEDIATAMENTE
                            try {
                    if (analyzeBtn) {
                                    sendToLogSystem('üñ±Ô∏è [DEBUG] Clicando #analyzeBtn para iniciar an√°lise (payout adequado)', 'DEBUG');
                        analyzeBtn.click();
                                    sendToLogSystem('üñ±Ô∏è [DEBUG] Click executado com sucesso', 'DEBUG');
                                    
                                    // Monitoramento cont√≠nuo desabilitado - payout ser√° verificado na pr√≥xima an√°lise
                    } else {
                                    const errorMsg = 'Bot√£o #analyzeBtn n√£o encontrado';
                        sendToLogSystem(errorMsg, 'ERROR');
                                    toUpdateStatus(errorMsg, 'error', 5000);
                    }
                } catch (error) {
                                const errorMsg = `Erro ao clicar em #analyzeBtn: ${error.message}`;
                    sendToLogSystem(errorMsg, 'ERROR');
                                toUpdateStatus(errorMsg, 'error', 5000);
                            }
                        } else {
                            // ‚ö†Ô∏è PAYOUT INSUFICIENTE - Aplicar comportamento configurado pelo usu√°rio
                            sendToLogSystem(`‚ö†Ô∏è Payout insuficiente (${currentPayout}% < ${minPayoutRequired}%). Aplicando comportamento: ${payoutBehavior}`, 'WARN');
                            
                            // APLICAR COMPORTAMENTO CONFIGURADO DIRETAMENTE
                            try {
                                await applyPayoutBehavior(currentPayout, minPayoutRequired, payoutBehavior, config);
                                
                                // Se chegou aqui, o comportamento foi executado com sucesso
                                sendToLogSystem('‚úÖ Comportamento de payout executado com sucesso. Iniciando an√°lise...', 'SUCCESS');
                                toUpdateStatus('Ativo adequado! Iniciando an√°lise...', 'success', 3000);
                                
                                // Clicar no bot√£o de an√°lise
                                try {
                                    if (analyzeBtn) {
                                        sendToLogSystem('üñ±Ô∏è [AN√ÅLISE] Clicando #analyzeBtn ap√≥s execu√ß√£o do comportamento de payout', 'INFO');
                                        analyzeBtn.click();
                                        sendToLogSystem('üñ±Ô∏è [AN√ÅLISE] Click executado - an√°lise iniciada', 'SUCCESS');
                                    } else {
                                        const errorMsg = 'Bot√£o #analyzeBtn n√£o encontrado ap√≥s comportamento de payout';
                                        sendToLogSystem(errorMsg, 'ERROR');
                                        toUpdateStatus(errorMsg, 'error', 5000);
                                    }
                                } catch (clickError) {
                                    const errorMsg = `Erro ao clicar em #analyzeBtn: ${clickError.message}`;
                                    sendToLogSystem(errorMsg, 'ERROR');
                                    toUpdateStatus(errorMsg, 'error', 5000);
                                }
                                
                            } catch (behaviorError) {
                                // Comportamento falhou - tratar erro
                                sendToLogSystem(`‚ùå Falha na execu√ß√£o do comportamento de payout: ${behaviorError}`, 'ERROR');
                                
                                if (behaviorError === 'PAYOUT_INSUFFICIENT') {
                                    const cancelMsg = `An√°lise cancelada: Payout atual (${currentPayout}%) abaixo do m√≠nimo (${minPayoutRequired}%)`;
                                    sendToLogSystem(cancelMsg, 'WARN');
                                    toUpdateStatus(cancelMsg, 'warn', 5000);
                                } else if (behaviorError === 'USER_CANCELLED') {
                                    sendToLogSystem('An√°lise cancelada pelo usu√°rio durante execu√ß√£o do comportamento', 'INFO');
                                    toUpdateStatus('Opera√ß√£o cancelada pelo usu√°rio', 'info', 3000);
                                } else if (behaviorError.includes('ASSET_SWITCH')) {
                                    const errorMsg = `Erro na troca de ativo: ${behaviorError}`;
                                    sendToLogSystem(errorMsg, 'ERROR');
                                    toUpdateStatus(errorMsg, 'error', 5000);
                                } else {
                                    const errorMsg = `Erro no comportamento de payout: ${behaviorError}`;
                                    sendToLogSystem(errorMsg, 'ERROR');
                                    toUpdateStatus(errorMsg, 'error', 5000);
                                    
                                    // Cancelar opera√ß√£o em caso de erro cr√≠tico
                                    if (typeof window.cancelCurrentOperation === 'function') {
                                        window.cancelCurrentOperation(`Erro cr√≠tico: ${behaviorError}`);
                                    }
                                }
                            }
                        }
                    })
                    .catch(error => {
                        sendToLogSystem(`‚ùå Erro ao verificar payout: ${error.message}`, 'ERROR');
                        toUpdateStatus(`Erro na verifica√ß√£o de payout: ${error.message}`, 'error', 5000);
                        
                        // Cancelar opera√ß√£o em caso de erro cr√≠tico
                        if (typeof window.cancelCurrentOperation === 'function') {
                            window.cancelCurrentOperation(`Erro cr√≠tico na verifica√ß√£o de payout: ${error.message}`);
                        }
                    });
            } else {
                // *** CORRE√á√ÉO: Quando meta for atingida, PARAR automa√ß√£o e disparar evento ***
                sendToLogSystem(`üéØ [CONDI√á√ÉO] META ATINGIDA! Lucro atual ${currentProfit} >= Meta ${dailyProfitTarget}. Iniciando procedimento de parada...`, 'SUCCESS');
                
                // Disparar evento TARGET_REACHED
                chrome.runtime.sendMessage({
                    action: 'TARGET_REACHED',
                    data: {
                        currentProfit: currentProfit,
                        targetProfit: dailyProfitTarget,
                        reason: 'Daily profit target reached'
                    }
                });
                
                // *** DESATIVAR AUTOMA√á√ÉO ***
                chrome.storage.sync.get(['userConfig'], (configResult) => {
                    if (configResult.userConfig) {
                        const updatedConfig = { 
                            ...configResult.userConfig, 
                            automation: false 
                        };
                        chrome.storage.sync.set({ userConfig: updatedConfig }, () => {
                            sendToLogSystem('üî¥ Automa√ß√£o desativada automaticamente ap√≥s meta atingida', 'INFO');
                        });
                    }
                });
                
                // Log detalhado da parada
                chrome.runtime.sendMessage({
                    action: 'addLog',
                    logMessage: `üéØ META ATINGIDA: Lucro atual ${currentProfit} atingiu/superou meta de ${dailyProfitTarget} - Automa√ß√£o encerrada`,
                    logLevel: 'SUCCESS',
                    logSource: 'automation.js'
                });
                
                // Parar monitoramento de payout
                if (isPayoutMonitoringActive) {
                    stopPayoutMonitoring();
                }
                
                // *** REMOVIDO: Verifica√ß√£o peri√≥dica n√£o √© mais usada ***
                // if (isPeriodicCheckActive) {
                //     stopPeriodicMetaCheck();
                // }
                
                // Atualizar status para indicar sucesso
                toUpdateStatus(`üéØ Meta atingida! Lucro: ${currentProfit} / Meta: ${dailyProfitTarget}`, 'success', 10000);
                
                // O status ser√° resetado pelos listeners que criamos
                return; // N√£o continuar com automa√ß√£o
            }
        }); // Fim callback storage.sync.get
    }
    
    document.addEventListener('DOMContentLoaded', () => {
        sendToLogSystem('DOMContentLoaded disparado em automation.js.', 'DEBUG');
        
        analyzeBtn = document.querySelector('#analyzeBtn');
        startOperationBtn = document.querySelector('#start-operation');
        
        if (analyzeBtn) {
            sendToLogSystem('Bot√£o #analyzeBtn encontrado e referenciado por automation.js.', 'DEBUG');
        } else {
            sendToLogSystem('Bot√£o #analyzeBtn N√ÉO encontrado por automation.js no DOMContentLoaded.', 'WARN');
        }

        if (startOperationBtn) {
            sendToLogSystem('Bot√£o #start-operation encontrado. Adicionando listener por automation.js.', 'DEBUG');
            startOperationBtn.addEventListener('click', () => {
                sendToLogSystem('Bot√£o #start-operation clicado (listener em automation.js). Iniciando runAutomationCheck.', 'INFO');
                runAutomationCheck();
                
                // *** REMOVIDO: Verifica√ß√£o peri√≥dica causando problemas ***
                // A meta ser√° verificada apenas quando necess√°rio (ap√≥s opera√ß√µes)
            });
        } else {
            sendToLogSystem('Bot√£o #start-operation N√ÉO encontrado por automation.js.', 'WARN');
        }
        
        // Adicionar listener para o CustomEvent 'operationResult' disparado por trade-history.js
        document.addEventListener('operationResult', (event) => {
            sendToLogSystem(`Recebido CustomEvent 'operationResult'. Detalhes: ${JSON.stringify(event.detail)}`, 'INFO');
            
            // *** NOVO: Registrar opera√ß√£o no LimitsChecker ***
            if (window.limitsChecker && event.detail) {
                window.limitsChecker.recordOperation(event.detail);
                sendToLogSystem('Opera√ß√£o registrada no LimitsChecker', 'DEBUG');
            }

            // Verificar se a automa√ß√£o est√° realmente configurada como ativa.
            chrome.storage.sync.get(['userConfig'], (storageResult) => {
                if (chrome.runtime.lastError) {
                    const errorMsg = `Falha ao ler userConfig ap√≥s 'operationResult': ${chrome.runtime.lastError.message}`;
                    sendToLogSystem(errorMsg, 'ERROR');
                    return;
                }
                const config = storageResult.userConfig || {};
                const lastOpSuccess = event.detail.success; // Resultado da opera√ß√£o que disparou o evento

                if (config.automation) {
                    sendToLogSystem('Automa√ß√£o confirmada como ATIVA. Verificando condi√ß√µes para novo ciclo...', 'DEBUG');
                    
                    if (config.gale && config.gale.active) {
                        // Gale est√° ATIVO
                        sendToLogSystem('Modo Gale ATIVO detectado.', 'DEBUG');
                        if (lastOpSuccess) {
                            sendToLogSystem('√öltima opera√ß√£o foi um GANHO com Gale ativo. Automa√ß√£o prossegue para runAutomationCheck.', 'INFO');
                            runAutomationCheck();
                        } else {
                            sendToLogSystem('√öltima opera√ß√£o foi uma PERDA com Gale ativo. Automa√ß√£o aguardar√° o sistema Gale. Nenhuma nova an√°lise ser√° iniciada pela automa√ß√£o principal.', 'INFO');
                            // N√£o faz nada, deixa o Gale System lidar com a perda
                                                    // Monitoramento cont√≠nuo desabilitado - payout ser√° verificado na pr√≥xima an√°lise
                        }
                    } else {
                        // Gale est√° INATIVO
                        sendToLogSystem('Modo Gale INATIVO detectado. Automa√ß√£o prossegue para runAutomationCheck independentemente do resultado anterior.', 'INFO');
                        runAutomationCheck();
                        
                        // Monitoramento cont√≠nuo desabilitado - payout ser√° verificado na pr√≥xima an√°lise
                    }
                } else {
                    sendToLogSystem('Automa√ß√£o est√° DESATIVADA nas configura√ß√µes. \'operationResult\' ignorado para ciclo de automa√ß√£o.', 'INFO');
                    
                    // Parar monitoramento se automa√ß√£o estiver desativada
                    if (isPayoutMonitoringActive) {
                        stopPayoutMonitoring();
                    }
                    
                    // *** REMOVIDO: Verifica√ß√£o peri√≥dica n√£o √© mais usada ***
                    // if (isPeriodicCheckActive) {
                    //     stopPeriodicMetaCheck();
                    // }
                }
            });
        });
        sendToLogSystem('Listener para CustomEvent \'operationResult\' adicionado.', 'DEBUG');
    });

    sendToLogSystem('M√≥dulo de Automa√ß√£o carregado e configurado para controle direto e escuta de operationResult.', 'INFO');
    
    // *** REMOVIDO: Exposi√ß√£o global causava problemas ***
    // window.runAutomationCheck = runAutomationCheck;
    // window.startPeriodicMetaCheck = startPeriodicMetaCheck;
    // window.stopPeriodicMetaCheck = stopPeriodicMetaCheck;
    
    // *** NOVO: Listener para mensagens de outros m√≥dulos (como gale-system) ***
    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
        // Handler para verifica√ß√£o de payout solicitada pelo Gale System
        if (message.action === 'CHECK_PAYOUT_FOR_ANALYSIS' && message.source === 'gale-system') {
            sendToLogSystem('Gale System solicitou verifica√ß√£o de payout. Processando...', 'INFO');
            
            checkPayoutBeforeAnalysisForAutomation()
                .then(() => {
                    sendToLogSystem('Payout verificado e aprovado para Gale System', 'SUCCESS');
                    sendResponse({ 
                        success: true, 
                        shouldProceed: true, 
                        reason: 'Payout aprovado' 
                    });
                })
                .catch(error => {
                    if (error === 'PAYOUT_INSUFFICIENT') {
                        sendToLogSystem('Payout insuficiente detectado. Sistema autom√°tico tratou a situa√ß√£o.', 'WARN');
                        sendResponse({ 
                            success: true, 
                            shouldProceed: false, 
                            reason: 'Payout insuficiente - sistema j√° tratou automaticamente' 
                        });
                    } else if (error === 'USER_CANCELLED') {
                        sendResponse({ 
                            success: false, 
                            shouldProceed: false, 
                            reason: 'Verifica√ß√£o cancelada pelo usu√°rio' 
                        });
                    } else {
                        sendToLogSystem(`Erro na verifica√ß√£o de payout para Gale: ${error}`, 'ERROR');
                        sendResponse({ 
                            success: false, 
                            shouldProceed: true, 
                            reason: `Erro na verifica√ß√£o: ${error}` 
                        });
                    }
                });
            
            return true; // Resposta ass√≠ncrona
        }
        
        // Handler para an√°lise com verifica√ß√£o de ativo solicitada pelo Gale System
        if (message.action === 'EXECUTE_ANALYSIS_WITH_ASSET_CHECK' && message.source === 'gale-system') {
            sendToLogSystem('Gale System solicitou an√°lise com verifica√ß√£o de ativo. Processando...', 'INFO');
            
            const config = message.config || {};
            
            executeAnalysisWithAssetCheck(config)
                .then(() => {
                    sendToLogSystem('An√°lise com verifica√ß√£o de ativo conclu√≠da para Gale System', 'SUCCESS');
                    sendResponse({ 
                        success: true, 
                        reason: 'An√°lise iniciada ap√≥s verifica√ß√£o de ativo' 
                    });
                })
                .catch(error => {
                    sendToLogSystem(`Erro na an√°lise com verifica√ß√£o de ativo para Gale: ${error}`, 'ERROR');
                    sendResponse({ 
                        success: false, 
                        reason: `Erro: ${error}` 
                    });
                });
            
            return true; // Resposta ass√≠ncrona
        }
        
        // Handler para obter payout atual solicitado pelo Gale System
        if (message.action === 'GET_CURRENT_PAYOUT' && message.source === 'gale-system') {
            getCurrentPayoutForAutomation()
                .then(payout => {
                    sendResponse({ 
                        success: true, 
                        payout: payout 
                    });
                })
                .catch(error => {
                    sendResponse({ 
                        success: false, 
                        error: error.message 
                    });
                });
            
            return true; // Resposta ass√≠ncrona
        }
    });
    
    sendToLogSystem('Handlers de mensagens configurados para integra√ß√£o com outros m√≥dulos', 'DEBUG');
})(); 

// Fun√ß√£o para reportar erro ao StateManager
function reportSystemError(errorMessage, errorDetails = null) {
    sendToLogSystem(`ERRO DO SISTEMA: ${errorMessage}`, 'ERROR');
    
    if (window.StateManager) {
        const errorInfo = window.StateManager.reportError(errorMessage, errorDetails);
        toUpdateStatus(`Sistema parou por erro: ${errorMessage}`, 'error');
        return errorInfo;
    } else {
        sendToLogSystem('StateManager n√£o dispon√≠vel para reportar erro', 'ERROR');
        toUpdateStatus(`Sistema parou por erro: ${errorMessage}`, 'error');
        return null;
    }
}

// Fun√ß√£o wrapper para try-catch autom√°tico nas fun√ß√µes cr√≠ticas
async function safeExecuteAutomation(fn, functionName, ...args) {
    try {
        return await fn(...args);
    } catch (error) {
        reportSystemError(`Erro em ${functionName}: ${error.message}`, {
            function: functionName,
            args: args,
            stack: error.stack,
            module: 'automation.js'
        });
        throw error;
    }
}

// ======================================================================
// =================== SISTEMA DE VERIFICA√á√ÉO PERI√ìDICA ================
// ======================================================================

/**
 * Sistema de verifica√ß√£o peri√≥dica da meta para garantir detec√ß√£o
 */
let periodicCheckInterval = null;
let isPeriodicCheckActive = false;

/**
 * *** DESABILITADO: Verifica√ß√£o peri√≥dica causava problemas ***
 * Iniciar verifica√ß√£o peri√≥dica da meta
 */
function startPeriodicMetaCheck() {
    sendToLogSystem('‚ö†Ô∏è Verifica√ß√£o peri√≥dica desabilitada - meta ser√° verificada apenas ap√≥s opera√ß√µes', 'WARN');
    return; // *** DESABILITADO ***
    
    // C√≥digo original comentado para refer√™ncia futura
    /*
    if (isPeriodicCheckActive) {
        sendToLogSystem('Verifica√ß√£o peri√≥dica j√° est√° ativa', 'DEBUG');
        return;
    }
    
    sendToLogSystem('üîÑ Iniciando verifica√ß√£o peri√≥dica da meta (a cada 30s)', 'INFO');
    isPeriodicCheckActive = true;
    
    periodicCheckInterval = setInterval(() => {
        try {
            // Verificar se automa√ß√£o ainda est√° ativa
            chrome.storage.sync.get(['userConfig'], (result) => {
                const config = result.userConfig || {};
                
                if (config.automation) {
                    sendToLogSystem('üîç [VERIFICA√á√ÉO PERI√ìDICA] Checando meta...', 'DEBUG');
                    // Usar refer√™ncia global segura
                    if (typeof window.runAutomationCheck === 'function') {
                        window.runAutomationCheck();
                    } else if (typeof runAutomationCheck === 'function') {
                        runAutomationCheck();
                    } else {
                        sendToLogSystem('‚ö†Ô∏è [VERIFICA√á√ÉO PERI√ìDICA] runAutomationCheck n√£o encontrada', 'WARN');
                    }
                } else {
                    sendToLogSystem('üîç [VERIFICA√á√ÉO PERI√ìDICA] Automa√ß√£o desativada, parando verifica√ß√£o peri√≥dica', 'INFO');
                    stopPeriodicMetaCheck();
                }
            });
        } catch (error) {
            sendToLogSystem(`‚ùå [VERIFICA√á√ÉO PERI√ìDICA] Erro: ${error.message}`, 'ERROR');
        }
    }, 30000); // A cada 30 segundos
    */
}

/**
 * Parar verifica√ß√£o peri√≥dica
 */
function stopPeriodicMetaCheck() {
    if (periodicCheckInterval) {
        clearInterval(periodicCheckInterval);
        periodicCheckInterval = null;
        isPeriodicCheckActive = false;
        sendToLogSystem('üîÑ Verifica√ß√£o peri√≥dica da meta interrompida', 'INFO');
    }
} 
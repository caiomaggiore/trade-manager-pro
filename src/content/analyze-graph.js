// =============================================
// Configura√ß√µes Globais
// =============================================
// Definir a fun√ß√£o para log primeiro para evitar problemas de refer√™ncia circular
function logFromAnalyzer(message, level = 'INFO') {
    // console.log(`%c[${level}][analyze-graph.js] ${message}`, 'background: #3498db; color: white; padding: 3px; border-radius: 3px;'); // Manter para depura√ß√£o local se desejar
    
    // Enviar para o sistema centralizado de logs (log-sys.js ou background)
    try {
        if (chrome && chrome.runtime && chrome.runtime.id) { // Verificar se o contexto da extens√£o √© v√°lido
            chrome.runtime.sendMessage({
                action: 'addLog', // PADRONIZADO para addLog
                logMessage: message, // MODIFICADO: Remover prefixo
                level: level,
                source: 'analyze-graph.js' // Redundante se j√° prefixado, mas bom para o receptor
            }); // Callback removido
        }
    } catch (error) {
        console.warn('[analyze-graph.js] Exce√ß√£o ao tentar enviar log via runtime:', error);
    }
}

// Agora podemos usar a fun√ß√£o de log corrigida
logFromAnalyzer('AnalyzeGraph: Iniciando carregamento...', 'INFO');

// Removendo as constantes duplicadas e usando as do index.js

// =============================================
// Fun√ß√µes de Log
// =============================================
/**
 * Fun√ß√£o centralizada para adicionar logs
 * @param {string} message - Mensagem a ser registrada
 * @param {string} level - N√≠vel do log: 'INFO', 'WARN', 'ERROR', 'SUCCESS' ou 'DEBUG'
 * @param {string} source - Origem do log (padr√£o: 'analyze-graph.js')
 */
function graphAddLog(message, level = 'INFO', source = 'analyze-graph.js') {
    // Chama a fun√ß√£o de log padronizada deste m√≥dulo
    // O par√¢metro 'source' aqui √© mais para compatibilidade se a fun√ß√£o era chamada com ele,
    // mas logFromAnalyzer j√° adiciona um prefixo [analyze-graph.js]
    logFromAnalyzer(message, level); 
}

// Fun√ß√£o padronizada para enviar status para o index
function toUpdateStatus(message, type = 'info', duration = 3000) {
    if (chrome && chrome.runtime && chrome.runtime.id) {
        chrome.runtime.sendMessage({
            action: 'updateStatus',
            message: message,
            type: type,
            duration: duration
        });
    }
}

// =============================================
// üß† SISTEMA DE INTELIG√äNCIA LOCAL 
// =============================================

/**
 * Verifica se deve usar intelig√™ncia local ou chamar IA
 */
const checkLocalIntelligence = async (settings) => {
    try {
        // Verificar se o m√≥dulo de intelig√™ncia local est√° dispon√≠vel
        if (!window.LocalIntelligence) {
            logFromAnalyzer('M√≥dulo LocalIntelligence n√£o dispon√≠vel - procedendo com IA', 'WARN');
            return { useLocal: false, reason: 'M√≥dulo n√£o carregado' };
        }
        
        // Obter informa√ß√µes atuais
        const currentPayout = await getCurrentPayout();
        const currentAsset = await getCurrentAsset();
        
        logFromAnalyzer(`Verificando intelig√™ncia local - Payout: ${currentPayout}%, Ativo: ${currentAsset}`, 'INFO');
        
        // Fazer decis√£o inteligente
        const decision = await window.LocalIntelligence.makeIntelligentDecision(currentPayout, currentAsset);
        
        if (!decision.shouldCall) {
            logFromAnalyzer(`üí° ECONOMIA DE TOKENS: ${decision.reason}`, 'SUCCESS');
            toUpdateStatus(`üí° Decis√£o local: ${decision.localDecision.action}`, 'info', 3000);
            return {
                useLocal: true,
                localResult: decision.localDecision,
                reason: decision.reason
            };
        }
        
        return {
            useLocal: false,
            preAnalysis: decision.preAnalysis,
            reason: decision.reason
        };
        
    } catch (error) {
        logFromAnalyzer(`Erro na verifica√ß√£o de intelig√™ncia local: ${error.message}`, 'ERROR');
        return { useLocal: false, reason: 'Erro na verifica√ß√£o' };
    }
};

/**
 * Obter payout atual
 */
const getCurrentPayout = async () => {
    try {
        if (window.PayoutController) {
            const result = await window.PayoutController.getCurrentPayout();
            return result.payout;
        } else if (typeof window.capturePayoutFromDOM === 'function') {
            const result = await window.capturePayoutFromDOM();
            return result.payout;
        }
        return 85; // Valor padr√£o
    } catch (error) {
        logFromAnalyzer(`Erro ao obter payout: ${error.message}`, 'WARN');
        return 85;
    }
};

/**
 * Obter ativo atual
 */
const getCurrentAsset = async () => {
    try {
        // Tentar obter via DOM ou outras fontes
        const assetElement = document.querySelector('[data-asset-name]') || 
                           document.querySelector('.asset-name') ||
                           document.querySelector('.current-asset');
        
        if (assetElement) {
            return assetElement.textContent || assetElement.dataset.assetName || 'UNKNOWN';
        }
        
        return 'UNKNOWN';
    } catch (error) {
        logFromAnalyzer(`Erro ao obter ativo atual: ${error.message}`, 'WARN');
        return 'UNKNOWN';
    }
};

// =============================================
// Fun√ß√µes de An√°lise (MODIFICADAS)
// =============================================

/**
 * Gera prompt ENRIQUECIDO com intelig√™ncia local
 */
const generateIntelligentPrompt = (availablePeriods, userTradeTime, preAnalysis) => {
    const basePrompt = generateDetailedPrompt(availablePeriods, userTradeTime);
    
    if (!preAnalysis) {
        return basePrompt;
    }
    
    // Enriquecer prompt com intelig√™ncia local
    const enrichedContext = `
üìä CONTEXTO INTELIGENTE (baseado em hist√≥rico local):
- An√°lise pr√©via: ${preAnalysis.reasons.join(', ')}
- Recomenda√ß√£o de ativo: ${preAnalysis.assetRecommendation}
- Recomenda√ß√£o de payout: ${preAnalysis.payoutRecommendation}
- Confian√ßa pr√©via: ${(preAnalysis.confidence * 100).toFixed(1)}%

IMPORTANTE: Use este contexto para uma an√°lise mais precisa e focada.
${preAnalysis.assetRecommendation === 'SWITCH' ? 'CONSIDERE FORTEMENTE recomendar troca de ativo.' : ''}
${preAnalysis.confidence > 0.5 ? 'Os dados hist√≥ricos sugerem cautela nesta situa√ß√£o.' : ''}
`;
    
    return enrichedContext + basePrompt;
};

/**
 * Gera prompt detalhado para an√°lise normal
 */
const generateDetailedPrompt = (availablePeriods, userTradeTime) => {
    let periodInstruction = '';
    
    if(userTradeTime === 0) {
        periodInstruction = `Op√ß√µes de per√≠odo dispon√≠veis: ${availablePeriods.join(', ')}\n` +
        "Selecione o melhor per√≠odo entre as op√ß√µes acima.";
    } else {
        periodInstruction = `Use per√≠odo fixo de ${userTradeTime} minutos.`;
    }

    return `Voc√™ √© um analista especializado em trading intradi√°rio. Analise o gr√°fico considerando:
1. Tend√™ncia de pre√ßo (M√©dias M√≥veis 9, 21 e 50 per√≠odos EMA)
2. MACD Fast 5, Slow 15 e Sinal 5
3. Forma√ß√µes de velas (Engulfing, Pin Bar, etc.)
4. RSI em 5 periodos
5. SuperTrend que sinaliza com uma flag Sell ou Buy
6. ${periodInstruction}
7. Se o grafico n√£o apresentar tendencia, sinalise com WAIT. 

Responda STRICT JSON:
{
  "action": "BUY/SELL/WAIT",
  "reason": "Explica√ß√£o t√©cnica resumida.",
  "trust": "N√∫mero de 0-100 indicando confian√ßa",
  "expiration": "Tempo em minutos (1 - 15), se action for = WAIT, ent√£o expiration = 1"
}`;
};

/**
 * Gera prompt simplificado para modo de teste
 */
const generateSimplePrompt = (availablePeriods, userTradeTime) => {
    let periodInstruction = '';
    
    if(userTradeTime === 0) {
        periodInstruction = `Per√≠odo recomendado: 5 minutos.`;
    } else {
        periodInstruction = `Per√≠odo: ${userTradeTime} minutos.`;
    }

    return `Analise este gr√°fico de trading de forma simplificada e objetiva. D√™ prefer√™ncia para sinais de entrada (BUY/SELL) em vez de WAIT.
1. Observe a tend√™ncia atual e as √∫ltimas 3-5 velas
2. Identifique pontos de suporte e resist√™ncia
3. ${periodInstruction}
4. Concentre-se em oportunidades imediatas, priorizando sinais de compra ou venda
5. Seja direto e preciso na sua an√°lise

Responda STRICT JSON:
{
  "action": "BUY/SELL/WAIT",
  "reason": "Explica√ß√£o simples e direta da sua decis√£o.",
  "trust": "N√∫mero de 0-100 indicando confian√ßa",
  "period": 5,
  "entry": "Valor aproximado de entrada",
  "expiration": "Tempo em minutos (1 - 15)"
}`;
};

/**
 * Seleciona o prompt adequado com base nas configura√ß√µes E intelig√™ncia local
 */
const generateAnalysisPrompt = (availablePeriods, userTradeTime, isTestMode, preAnalysis = null) => {
    if (isTestMode) {
        return generateSimplePrompt(availablePeriods, userTradeTime);
    } else {
        return generateIntelligentPrompt(availablePeriods, userTradeTime, preAnalysis);
    }
};

/**
 * Valida e processa a resposta da API
 */
const validateAndProcessResponse = (rawText) => {
    try {
        // Sanitiza√ß√£o do JSON
        const jsonMatch = rawText.match(/{[\s\S]*?}/);
        if (!jsonMatch) throw new Error('Nenhum JSON v√°lido encontrado');

        const sanitized = jsonMatch[0]
            .replace(/(\w+):/g, '"$1":')
            .replace(/'/g, '"')
            .replace(/(\d+),(\s*})/g, '$1$2');

        const parsed = JSON.parse(sanitized);
        
        // Valida√ß√µes
        if (!['BUY', 'SELL', 'WAIT'].includes(parsed.action)) {
            throw new Error('A√ß√£o inv√°lida');
        }
        
        if (!parsed.reason || typeof parsed.reason !== 'string') {
            throw new Error('Raz√£o inv√°lida');
        }
        
        parsed.trust = Math.min(Math.max(Number(parsed.trust || 75), 0), 100);
        parsed.expiration = Math.min(Math.max(Number(parsed.expiration || 5), 1), 15);

        return parsed;
    } catch (error) {
        throw new Error(`Valida√ß√£o falhou: ${error.message}`);
    }
};

/**
 * Processa a an√°lise do gr√°fico (MODIFICADO COM INTELIG√äNCIA LOCAL)
 */
const processAnalysis = async (imageData, settings) => {
    try {
        graphAddLog('üß† Iniciando an√°lise inteligente...', 'INFO');
        
        // *** NOVO: VERIFICA√á√ÉO DE INTELIG√äNCIA LOCAL ***
        const intelligenceCheck = await checkLocalIntelligence(settings);
        
        if (intelligenceCheck.useLocal) {
            // ‚úÖ DECIS√ÉO LOCAL - ECONOMIZAR TOKENS
            graphAddLog(`üí° Decis√£o tomada localmente: ${intelligenceCheck.localResult.action}`, 'SUCCESS');
            
            // Formatar como resposta da IA para compatibilidade
            const localResult = {
                action: intelligenceCheck.localResult.action,
                trust: Math.round(intelligenceCheck.localResult.confidence * 100),
                reason: intelligenceCheck.localResult.reasons.join('; '),
                expiration: 5,
                source: 'local-intelligence',
                tokensaved: true
            };
            
            // *** ATUALIZAR INTELIG√äNCIA LOCAL COM RESULTADO ***
            if (window.LocalIntelligence) {
                setTimeout(() => {
                    window.LocalIntelligence.recordTokenSaving('local_decision');
                }, 100);
            }
            
            return {
                success: true,
                result: localResult
            };
        }
        
        // *** CONTINUAR COM IA (com contexto enriquecido) ***
        graphAddLog('ü§ñ Prosseguindo com an√°lise da IA (contexto enriquecido)', 'INFO');
        
        // Verificar se o imageData √© v√°lido
        if (!imageData || typeof imageData !== 'string' || !imageData.startsWith('data:image')) {
            throw new Error('Dados de imagem inv√°lidos ou ausentes');
        }
        
        // *** NOVO: An√°lise pr√©via com Local Pattern Detector ***
        if (window.localPatternDetector) {
            graphAddLog('Executando an√°lise pr√©via local da imagem...', 'INFO');
            
            try {
                const localAnalysis = await window.localPatternDetector.analyzeImage(imageData);
                graphAddLog(`An√°lise local conclu√≠da - Confian√ßa: ${localAnalysis.confidence}%`, 'INFO');
                
                // Verificar se a imagem tem qualidade suficiente para IA
                if (!localAnalysis.readyForAI) {
                    const reason = localAnalysis.recommendation.reason;
                    const suggestions = localAnalysis.recommendation.suggestions || [];
                    
                    graphAddLog(`Imagem rejeitada pela an√°lise local: ${reason}`, 'WARN');
                    
                    if (suggestions.length > 0) {
                        graphAddLog(`Sugest√µes: ${suggestions.join(', ')}`, 'INFO');
                    }
                    
                    // Retornar resultado de espera com base na an√°lise local
                    return {
                        action: 'WAIT',
                        reason: `An√°lise local: ${reason}. ${suggestions.length > 0 ? suggestions.join('. ') : ''}`,
                        trust: localAnalysis.confidence,
                        expiration: 1,
                        source: 'local-pattern-detector'
                    };
                }
            } catch (localError) {
                graphAddLog(`Erro na an√°lise local: ${localError.message}`, 'WARN');
            }
        }
        
        // Obter configura√ß√µes
        const userTradeTime = settings.period || 0;
        const isTestMode = settings.testMode || false;
        
        // *** NOVO: Usar prompt inteligente com pr√©-an√°lise ***
        const prompt = generateAnalysisPrompt(
            ["1", "2", "5", "10", "15"],
            userTradeTime,
            isTestMode,
            intelligenceCheck.preAnalysis
        );
        
        // Preparar payload para API
        const payload = {
            contents: [{
                parts: [
                    { text: prompt },
                    { 
                        inline_data: {
                            mime_type: "image/png",
                            data: imageData.split(',')[1]
                        }
                    }
                ]
            }]
        };
        
        // URL da API
        const apiUrl = window.API_URL || "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=AIzaSyDeYcYUxAN52DNrgZeFNcEfceVMoWJDjWk";
        
        // Fazer requisi√ß√£o
        graphAddLog('üì° Enviando para API Gemini com contexto enriquecido...', 'INFO');
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
        
        if (!response.ok) {
            throw new Error(`Erro na API: ${response.status}`);
        }
        
        const data = await response.json();
        const text = data.candidates?.[0]?.content?.parts?.[0]?.text;
        
        if (!text) {
            throw new Error('Texto de resposta vazio ou ausente');
        }
        
        // Log direto da resposta recebida
        console.log("%c[AN√ÅLISE] Resposta recebida da API", "background: #2ecc71; color: white; padding: 5px; font-weight: bold;");
        console.log(text.substring(0, 200) + "...");
        
        // Extrair JSON da resposta
        const jsonMatch = text.match(/{[\s\S]*?}/);
        if (!jsonMatch) {
            throw new Error('Resposta inv√°lida da API');
        }

        // Tentar analisar o JSON de v√°rias maneiras para aumentar a robustez
        let result;
        try {
            // Primeiro, tentar analisar o JSON diretamente
            result = JSON.parse(jsonMatch[0]);
        } catch (jsonError) {
            console.log('Erro ao analisar JSON diretamente, tentando sanitizar', jsonError);
            
            // Tentar sanitizar e analisar novamente
            try {
                const sanitized = jsonMatch[0]
                    .replace(/(\w+):/g, '"$1":')
                    .replace(/'/g, '"')
                    .replace(/(\d+),(\s*})/g, '$1$2');
                    
                result = JSON.parse(sanitized);
            } catch (sanitizeError) {
                throw new Error('Imposs√≠vel analisar a resposta da API');
            }
        }
        
        graphAddLog(`An√°lise conclu√≠da: ${result.action} (${result.trust}% de confian√ßa)`, 'success');
        
        // *** NOVO: Armazenar resultado no cache ***
        if (window.cacheAnalyzer) {
            try {
                const imageHash = btoa(imageData.substring(0, 100)).substring(0, 16);
                const context = {
                    automation: settings.automation || false,
                    galeActive: settings.galeActive || false,
                    localContext: intelligenceCheck.preAnalysis || null
                };
                
                // Estimar tokens utilizados (aproxima√ß√£o)
                const estimatedTokens = 1500; // Base + prompt + imagem
                
                window.cacheAnalyzer.setAIAnalysis(imageHash, context, result, estimatedTokens);
                graphAddLog(`Resultado armazenado no cache (${estimatedTokens} tokens estimados)`, 'DEBUG');
            } catch (cacheError) {
                graphAddLog(`Erro ao armazenar no cache: ${cacheError.message}`, 'WARN');
            }
        }
        
        return {
            success: true,
            result
        };

    } catch (error) {
        console.error('Erro na an√°lise:', error);
        
        try {
            graphAddLog(`Erro na an√°lise: ${error.message}`, 'ERROR');
        } catch (logError) {
            console.error('Tamb√©m falhou ao registrar o erro:', logError);
        }
        
        return {
            success: false,
            error: error.message || 'Erro desconhecido na an√°lise'
        };
    }
};

// =============================================
// Obter configura√ß√µes do sistema
// =============================================
async function getSystemConfig() {
    try {
        if (window.StateManager) {
            return await window.StateManager.getConfig();
        } else {
            // Fallback para storage direto
            return new Promise((resolve) => {
                chrome.storage.sync.get(['userConfig'], (result) => {
                    resolve(result.userConfig || {});
                });
            });
        }
    } catch (error) {
        logFromAnalyzer('Erro ao obter configura√ß√µes:', 'ERROR');
        return {};
    }
}

// =============================================
// Exporta√ß√£o de API P√∫blica
// =============================================

/**
 * Processa a an√°lise de uma imagem diretamente (MODIFICADO)
 * @param {string} imageData - A imagem em formato dataUrl
 * @param {Object} settings - Configura√ß√µes do usu√°rio
 * @returns {Promise<Object>} - Resultado da an√°lise
 */
async function analyzeImage(imageData, settings = {}) {
    try {
        logFromAnalyzer('üß† Iniciando an√°lise direta de imagem com intelig√™ncia local', 'INFO');
        
        // Verificar se a imagem √© v√°lida
        if (!imageData || typeof imageData !== 'string' || !imageData.startsWith('data:image')) {
            throw new Error('Dados de imagem inv√°lidos');
        }
        
        // *** VERIFICA√á√ÉO DE INTELIG√äNCIA LOCAL ***
        const intelligenceCheck = await checkLocalIntelligence(settings);
        
        if (intelligenceCheck.useLocal) {
            logFromAnalyzer(`üí° ECONOMIA DE TOKENS: ${intelligenceCheck.reason}`, 'SUCCESS');
            
            const localResult = {
                action: intelligenceCheck.localResult.action,
                trust: Math.round(intelligenceCheck.localResult.confidence * 100),
                reason: `LOCAL: ${intelligenceCheck.localResult.reasons.join('; ')}`,
                expiration: 5,
                timestamp: new Date().toISOString(),
                source: 'local-intelligence'
            };
            
            return localResult;
        }
        
        // Obter configura√ß√µes do sistema
        const systemConfig = await getSystemConfig();
        const userTradeTime = settings.period || 0;
        const isTestMode = settings.testMode || false;
        
        // Gerar prompt adequado ao contexto (com pr√©-an√°lise)
        const prompt = generateAnalysisPrompt(
            systemConfig.availablePeriods || ["1", "2", "5", "10", "15"],
            userTradeTime,
            isTestMode,
            intelligenceCheck.preAnalysis
        );
        
        // Montar payload para a API
        const payload = {
            contents: [{
                parts: [
                    { text: prompt },
                    { 
                        inline_data: {
                            mime_type: "image/png",
                            data: imageData.split(',')[1]
                        }
                    }
                ]
            }]
        };
        
        // Obter URL da API
        const apiUrl = window.API_URL || "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=AIzaSyDeYcYUxAN52DNrgZeFNcEfceVMoWJDjWk";
        
        // Enviar para a API
        logFromAnalyzer('üì° Enviando solicita√ß√£o para a API Gemini com contexto inteligente...', 'INFO');
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
        
        // Verificar se a resposta √© v√°lida
        if (!response.ok) {
            throw new Error(`Erro na API: ${response.status} ${response.statusText}`);
        }
        
        // Processar a resposta
        const data = await response.json();
        
        if (!data.candidates || !data.candidates[0]?.content?.parts || !data.candidates[0].content.parts[0]?.text) {
            throw new Error('Resposta da API sem conte√∫do v√°lido');
        }
        
        // Extrair o texto da resposta
        const rawText = data.candidates[0].content.parts[0].text;
        
        // Validar e processar o resultado
        const result = validateAndProcessResponse(rawText);
        
        // Adicionar timestamp
        result.timestamp = new Date().toISOString();
        
        logFromAnalyzer(`An√°lise conclu√≠da com sucesso: ${result.action}`, 'SUCCESS');
        return result;
    } catch (error) {
        logFromAnalyzer(`Erro na an√°lise: ${error.message}`, 'ERROR');
        throw error;
    }
}

// Exportar API global para uso em outros m√≥dulos
window.AnalyzeGraph = {
    analyzeImage: analyzeImage
};

// =============================================
// Listener Principal
// =============================================
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    if (request.action === 'PROCESS_ANALYSIS') {
        console.log('[An√°lise] Solicita√ß√£o de an√°lise recebida');
        
        // Executar em um bloco try-catch para garantir que sendResponse seja sempre chamado
        try {
            // Usar um timeout para garantir que alguma resposta seja enviada
            const timeout = setTimeout(() => {
                console.log('[An√°lise] Timeout atingido, enviando resposta de erro');
                sendResponse({
                    success: false,
                    error: 'Timeout ao processar an√°lise'
                });
            }, 30000); // 30 segundos
            
            // Processar a an√°lise
            processAnalysis(request.imageData, request.settings)
                .then(result => {
                    clearTimeout(timeout);
                    console.log('[An√°lise] Enviando resposta de an√°lise conclu√≠da');
                    sendResponse({
                        success: true,
                        results: result
                    });
                })
                .catch(error => {
                    clearTimeout(timeout);
                    console.error('[An√°lise] Erro no processamento:', error);
                    sendResponse({
                        success: false,
                        error: error.message || 'Erro desconhecido no processamento'
                    });
                });
        } catch (error) {
            console.error('[An√°lise] Erro cr√≠tico no processamento:', error);
            sendResponse({
                success: false,
                error: 'Erro cr√≠tico ao iniciar processamento'
            });
        }
        
        // Importante: retornar true para indicar que a resposta ser√° ass√≠ncrona
        return true;
    }
    
    // Para outras mensagens, n√£o vamos manipular
    return false;
});

logFromAnalyzer('AnalyzeGraph: Carregamento conclu√≠do com sistema de intelig√™ncia local', 'INFO');

/**
 * Trade Manager Pro - Sistema de Logs
 * Este arquivo gerencia o sistema centralizado de logs da aplica√ß√£o
 */

// ================== VERIFICA√á√ÉO DE P√ÅGINA ==================
// Fun√ß√£o para verificar se estamos na p√°gina de logs
const isLogPage = () => {
    return document.getElementById('log-container') !== null;
};

// Detectar se estamos na p√°gina de logs
window.IS_LOG_PAGE = isLogPage();

// Lista de mensagens que devem ser ignoradas para n√£o poluir o log
const IGNORED_MESSAGES = [
    'P√°gina de logs inicializada',
    'Sistema de logs inicializado',
    'undefined'
];

// ================== ELEMENTOS DA UI ==================
const sysUI = {
    copyBtn: document.getElementById('copy-logs'),
    saveBtn: document.getElementById('export-logs'),
    clearBtn: document.getElementById('clear-logs'),
    closeBtn: document.getElementById('close-logs'),
    logContainer: document.getElementById('log-container'),
    levelFilter: document.getElementById('log-level-filter')
};

// ================== N√çVEIS DE LOG ==================
const LOG_LEVELS = {
    DEBUG: { value: 0, prefix: 'üêõ DEBUG', className: 'log-debug' },
    INFO: { value: 1, prefix: '‚ÑπÔ∏è INFO', className: 'log-info' },
    WARN: { value: 2, prefix: '‚ö†Ô∏è AVISO', className: 'log-warn' },
    ERROR: { value: 3, prefix: '‚ùå ERRO', className: 'log-error' },
    SUCCESS: { value: 4, prefix: '‚úÖ SUCESSO', className: 'log-success' }
};

// Filtro de n√≠vel atual (null = mostrar todos)
let CURRENT_FILTER_LEVEL = null;

// Lista de fontes/origens de logs que devem ser filtradas (logs destas fontes ser√£o ignorados a menos que sejam erros)
const FILTERED_SOURCES = [
    'navigationManager', 
    'NavigationManager', 
    'navigation.js',
    'log-sys.js'
];

// Lista de padr√µes de mensagens que devem ser ignoradas (mesmo sendo de n√≠veis mais altos)
const FILTERED_MESSAGE_PATTERNS = [
    'Container de p√°gina detectado',
    'Container de p√°gina removido',
    'P√°gina removida com sucesso',
    'Inicializando',
    'Carregando',
    'Inicializado',
    'Sistema iniciado',
    'API exposta',
    'Observador de p√°ginas',
    'Recebido postMessage',
    'M√©todo init',
    'Construtor conclu√≠do',
    'Fechando p√°gina de logs',
    'Fechando p√°gina de configura√ß√µes',
    'UI atualizada com as configura√ß√µes'
];

// Fun√ß√£o para verificar se uma mensagem deve ser filtrada
const shouldFilterMessage = (message, level, source) => {
    // Nunca filtrar mensagens - queremos ver todos os logs sem exce√ß√£o
    return false;
};

// ================== UTILIDADES DO SISTEMA DE LOGS ==================

// Fun√ß√£o para verificar se o contexto da extens√£o √© v√°lido
function isExtensionContextValid() {
    return typeof chrome !== 'undefined' && 
           chrome.runtime && 
           chrome.runtime.id;
}

// Fun√ß√£o para formatar timestamp de maneira consistente
function formatTimestamp(date = new Date()) {
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    const seconds = date.getSeconds().toString().padStart(2, '0');
    return `[${day}/${month}/${year}, ${hours}:${minutes}:${seconds}]`;
}

// Fun√ß√£o para formatar n√≠vel de log
function formatLogLevel(level) {
    const upperLevel = (level || 'INFO').toUpperCase();
    switch(upperLevel) {
        case 'INFO': return '‚ÑπÔ∏è INFO';
        case 'WARN': return '‚ö†Ô∏è AVISO';
        case 'ERROR': return '‚ùå ERRO';
        case 'SUCCESS': return '‚úÖ SUCESSO';
        case 'DEBUG': return 'üîç DEBUG';
        default: return '‚ÑπÔ∏è INFO';
    }
}

// ================== SISTEMA DE LOGS ==================
const LogSystem = {
    logs: [],
    maxLogs: 500,
    container: null,
    initialized: false,
    lastLogKey: '', // Para evitar duplica√ß√£o imediata do mesmo log
    
    init() {
        // Atualizar refer√™ncia ao container de logs
        this.container = document.querySelector('.log-container');
        
        // Evitar inicializa√ß√µes duplicadas
        if (this.initialized) {
            return this;
        }
        
        // Primeiro, carregar logs do storage
        this.loadLogsFromStorage().then(() => {
            // Marcar como inicializado somente ap√≥s carregar os logs
            this.initialized = true;
            
            // Adicionar log de inicializa√ß√£o somente uma vez
            if (this.logs.length === 0) {
                this.addLog('Sistema de logs inicializado', 'INFO', 'LogSystem');
            }
            
            // Atualizar a UI agora que temos os logs
            this.updateUI();
        }).catch(error => {
            console.error('[LogSystem] Erro ao inicializar sistema de logs:', error);
            this.initialized = true; // Inicializar mesmo com erro
            this.addLog(`Erro ao carregar logs: ${error.message}`, 'ERROR', 'LogSystem');
        });
        
        return this;
    },
    
    // Carregar logs do storage
    async loadLogsFromStorage() {
        if (!isExtensionContextValid()) {
            return;
        }
        
        try {
            // Verificar se temos acesso ao storage
            if (typeof chrome === 'undefined' || !chrome.storage || !chrome.storage.local) {
                throw new Error('API de storage n√£o dispon√≠vel');
            }
            
            // Verificar se os logs foram recentemente limpos
            const clearFlag = localStorage.getItem('logsRecentlyCleared');
            if (clearFlag && (Date.now() - parseInt(clearFlag)) < 5000) { // 5 segundos
                console.log('[LogSystem] Logs foram recentemente limpos, ignorando carregamento do storage');
                this.logs = []; // Garantir que logs estejam vazios
                return;
            }
            
            // Carregar logs usando Promise
            const result = await new Promise((resolve, reject) => {
                chrome.storage.local.get(['systemLogs'], (result) => {
                    if (chrome.runtime.lastError) {
                        reject(new Error(chrome.runtime.lastError.message || 'Erro desconhecido'));
                        return;
                    }
                    resolve(result);
                });
            });
            
            const storedLogs = result.systemLogs || [];
            
            // Verificar se o storage est√° vazio ou tem apenas o log de limpeza
            if (storedLogs.length === 0) {
                this.logs = [];
                return;
            }
            
            if (storedLogs.length === 1 && 
                storedLogs[0].message && 
                storedLogs[0].message.includes('Todos os logs foram limpos')) {
                this.logs = storedLogs;
                return;
            }
            
            if (storedLogs.length > 0) {
                // Filtrar logs duplicados
                const uniqueLogs = this.removeDuplicateLogs(storedLogs);
                
                // Converter os logs armazenados para o formato interno
                this.logs = uniqueLogs.map(log => {
                    // Validar a mensagem para evitar undefined
                    const message = log.message || '';
                    if (!message && typeof message !== 'string') {
                        // Ignorar logs com mensagem undefined 
                        return null;
                    }
                    
                    // Criar um timestamp baseado na data armazenada ou usar a atual como fallback
                    const logDate = log.date ? new Date(log.date) : new Date();
                    
                    return {
                        message: message,
                        level: log.level || 'INFO',
                        source: log.source || 'SYSTEM',
                        timestamp: logDate,
                        timestampFormatted: formatTimestamp(logDate)
                    };
                }).filter(log => log !== null); // Remover logs inv√°lidos
                
                // Ordenar logs cronologicamente
                this.logs.sort((a, b) => a.timestamp - b.timestamp);
                
                // Limitar ao n√∫mero m√°ximo de logs
                if (this.logs.length > this.maxLogs) {
                    this.logs = this.logs.slice(-this.maxLogs);
                }
            }
        } catch (error) {
            console.error('[LogSystem] Erro ao carregar logs:', error);
            throw error;
        }
    },
    
    // M√©todo para remover logs duplicados
    removeDuplicateLogs(logs) {
        // Map para armazenar logs √∫nicos usando uma chave composta
        const uniqueMap = new Map();
        
        // Percorrer todos os logs v√°lidos
        logs.filter(log => log.message).forEach(log => {
            // Criar uma chave composta baseada apenas em message + source + level
            // Ignorando timestamp para eliminar duplicatas com timestamps diferentes
            const key = `${log.message || ''}-${log.source || ''}-${log.level || ''}`;
            
            // Se j√° existe um log com esta chave, s√≥ mant√©m o mais recente
            if (!uniqueMap.has(key) || 
                (uniqueMap.get(key).timestamp < (log.timestamp || 0))) {
                uniqueMap.set(key, log);
            }
        });
        
        // Converter o map de volta para array
        return Array.from(uniqueMap.values());
    },
    
    // Verificar se um log √© duplicado
    isDuplicateLog(message, level, source) {
        if (!message) return true; // Considerar undefined como duplicata
        
        // Verificar se devemos ignorar este tipo de mensagem
        if (shouldIgnoreMessage(message)) {
            return true;
        }
        
        // Chave para verifica√ß√£o de duplicata no curto prazo
        const key = `${message}-${level}-${source}`;
        
        // Verificar se √© a mesma mensagem chamada imediatamente
        if (key === this.lastLogKey) {
            return true;
        }
        
        // Atualizar a √∫ltima chave
        this.lastLogKey = key;
        
        // Verificar nos logs recentes (√∫ltimo minuto)
        const now = new Date().getTime();
        return this.logs.some(log => 
            log.message === message && 
            log.level === level && 
            log.source === source && 
            (now - log.timestamp.getTime()) < 10000 // 10 segundos
        );
    },
    
    // Adicionar log ao sistema
    addLog(message, level = 'INFO', source = 'SYSTEM') {
        // Validar entrada
        if (!message) return false; // N√£o registrar logs vazios ou undefined
        
        // Normalizar par√¢metros
        const normalizedLevel = (level || 'INFO').toUpperCase();
        const normalizedSource = source || 'SYSTEM';
        
        // Verificar duplicidade
        if (this.isDuplicateLog(message, normalizedLevel, normalizedSource)) {
            return false;
        }
        
        // Criar dados do log
        const now = new Date();
        const formattedTimestamp = formatTimestamp(now);
        
        // Objeto de log interno
        const logEntry = {
            message: message,
            level: normalizedLevel,
            source: normalizedSource,
            timestamp: now,
            timestampFormatted: formattedTimestamp
        };
        
        // Adicionar ao array de logs
        this.logs.push(logEntry);
        
        // Limitar o n√∫mero de logs armazenados
        if (this.logs.length > this.maxLogs) {
            this.logs.shift();
        }
        
        // Salvar no storage para persist√™ncia
        this.saveLogToStorage(logEntry);
        
        // Atualizar a UI se o container existir
        this.updateUI();
        
        // Log no console apenas para erros
        if (normalizedLevel === 'ERROR') {
            console.error(`[${normalizedLevel}][${normalizedSource}] ${message}`);
        }
        
        return true;
    },
    
    // Salvar log no storage para persist√™ncia
    async saveLogToStorage(logEntry) {
        if (!isExtensionContextValid()) {
            return false;
        }
        
        try {
            // Verificar se temos acesso ao storage
            if (!chrome.storage || !chrome.storage.local) {
                return false;
            }
            
            // Obter logs existentes
            const result = await new Promise(resolve => {
                chrome.storage.local.get(['systemLogs'], result => {
                    resolve(result);
                });
            });
            
            // Preparar logs para salvar
            let storedLogs = result.systemLogs || [];
            
            // Adicionar novo log
            storedLogs.push(logEntry);
            
            // Limitar a quantidade de logs armazenados
            if (storedLogs.length > this.maxLogs) {
                storedLogs = storedLogs.slice(-this.maxLogs);
            }
            
            // Remover duplicados antes de salvar
            storedLogs = this.removeDuplicateLogs(storedLogs);
            
            // Salvar logs atualizados
            await new Promise(resolve => {
                chrome.storage.local.set({ systemLogs: storedLogs }, resolve);
            });
            
            return true;
        } catch (error) {
            // Silenciar erros de storage - n√£o s√£o cr√≠ticos
            return false;
        }
    },
    
    // Atualizar a UI com os logs mais recentes
    updateUI() {
        if (!this.container) return;
        
        // Limpar o container mantendo apenas a mensagem de carregamento
        const loadingMsg = document.querySelector('.log-entry:first-child');
        this.container.innerHTML = '';
        
        if (this.logs.length === 0) {
            // Mostrar mensagem "Nenhum log encontrado"
            const emptyMsg = document.createElement('div');
            emptyMsg.className = 'log-entry log-info';
            emptyMsg.textContent = 'Nenhum log encontrado.';
            this.container.appendChild(emptyMsg);
            return;
        }
        
        // Adicionar cada log ao container
        this.logs.forEach(log => {
            // Criar elemento do log
            const logElement = document.createElement('div');
            logElement.className = `log-entry log-${log.level.toLowerCase()}`;
            
            // Adicionar atributos para filtragem futura
            logElement.setAttribute('data-level', log.level);
            logElement.setAttribute('data-source', log.source);
            
            // Construir o texto do log
            logElement.textContent = `${log.timestampFormatted} ${formatLogLevel(log.level)} [${log.source}] ${log.message}`;
            
            // Adicionar ao container
            this.container.appendChild(logElement);
        });
        
        // Rolar para o √∫ltimo log
        this.container.scrollTop = this.container.scrollHeight;
    },
    
    // Limpar todos os logs
    async clearLogs() {
        // Limpar o array de logs em mem√≥ria
        this.logs = [];
        
        // Vari√°vel para rastrear se o storage foi limpo com sucesso
        let storageCleared = false;
        
        // Definir flag no localStorage para indicar que os logs foram limpos recentemente
        try {
            localStorage.setItem('logsRecentlyCleared', Date.now().toString());
        } catch (e) {
            console.warn('[LogSystem] N√£o foi poss√≠vel definir flag de limpeza:', e);
        }
        
        // Limpar no storage tamb√©m - com m√∫ltiplas tentativas
        if (isExtensionContextValid() && chrome.storage && chrome.storage.local) {
            try {
                // Primeira tentativa: remover a chave systemLogs
                await new Promise(resolve => {
                    chrome.storage.local.remove(['systemLogs'], () => {
                        if (chrome.runtime.lastError) {
                            console.error(`[LogSystem] Erro ao limpar logs (tentativa 1): ${chrome.runtime.lastError.message}`);
                            resolve(false);
                        } else {
                            resolve(true);
                        }
                    });
                });
                
                // Segunda tentativa: definir a chave systemLogs como um array vazio
                await new Promise(resolve => {
                    chrome.storage.local.set({ systemLogs: [] }, () => {
                        if (chrome.runtime.lastError) {
                            console.error(`[LogSystem] Erro ao limpar logs (tentativa 2): ${chrome.runtime.lastError.message}`);
                            resolve(false);
                        } else {
                            storageCleared = true;
                            resolve(true);
                        }
                    });
                });
                
                // Verificar se a limpeza foi bem-sucedida
                if (storageCleared) {
                    console.log('[LogSystem] Storage limpo com sucesso');
                } else {
                    console.warn('[LogSystem] Poss√≠vel falha ao limpar o storage');
                }
            } catch (error) {
                console.error(`[LogSystem] Erro ao limpar logs do storage: ${error.message}`);
            }
        } else {
            console.warn('[LogSystem] Contexto da extens√£o inv√°lido, n√£o foi poss√≠vel limpar o storage');
        }
        
        // Adicionar log de limpeza - apenas ap√≥s tentar limpar o storage para n√£o salvar novamente
        this.addLog('Todos os logs foram limpos', 'INFO', 'LogSystem');
        
        // Verificar novamente o storage para garantir que est√° vazio
        this.verifyStorageCleared();
        
        // Atualizar a UI
        this.updateUI();
        
        // Notificar outras inst√¢ncias sobre a limpeza de logs
        try {
            chrome.runtime.sendMessage({
                action: 'logsCleaned',
                timestamp: Date.now()
            });
        } catch (e) {
            // Ignorar erros de comunica√ß√£o
        }
        
        return storageCleared;
    },
    
    // M√©todo auxiliar para verificar se o storage foi realmente limpo
    async verifyStorageCleared() {
        if (!isExtensionContextValid() || !chrome.storage || !chrome.storage.local) {
            return false;
        }
        
        try {
            const result = await new Promise(resolve => {
                chrome.storage.local.get(['systemLogs'], result => {
                    resolve(result);
                });
            });
            
            const logs = result.systemLogs || [];
            
            // Se ainda houver logs no storage ap√≥s a limpeza
            if (logs.length > 1) { // Permitir 1 log (o da limpeza)
                console.warn(`[LogSystem] Detectados ${logs.length} logs no storage ap√≥s limpeza`);
                
                // Tentar limpar novamente
                await new Promise(resolve => {
                    chrome.storage.local.set({ systemLogs: [] }, resolve);
                });
                
                return false;
            }
            
            return true;
        } catch (error) {
            console.error(`[LogSystem] Erro ao verificar limpeza do storage: ${error.message}`);
            return false;
        }
    },
    
    // Filtrar logs por n√≠vel
    filterByLevel(level) {
        if (!this.container) return;
        
        // Se o n√≠vel for 'ALL', mostrar todos os logs
        if (level === 'ALL') {
            this.container.querySelectorAll('.log-entry').forEach(entry => {
                entry.style.display = 'block';
            });
            return;
        }
        
        // Caso contr√°rio, filtrar por n√≠vel
        this.container.querySelectorAll('.log-entry').forEach(entry => {
            if (entry.classList.contains(`log-${level.toLowerCase()}`)) {
                entry.style.display = 'block';
            } else {
                entry.style.display = 'none';
            }
        });
    },
    
    // Obter todos os logs
    getLogs() {
        return this.logs;
    },
    
    // Obter logs formatados como texto para exporta√ß√£o
    getFormattedLogs() {
        return this.logs.map(log => 
            `${log.timestampFormatted} ${formatLogLevel(log.level)} [${log.source}] ${log.message}`
        ).join('\n');
    },
    
    // Baixar logs como arquivo
    downloadLogs() {
        const content = this.getFormattedLogs();
        const blob = new Blob([content], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `trade-manager-logs-${new Date().toISOString().slice(0, 10)}.txt`;
        a.click();
        
        URL.revokeObjectURL(url);
        
        // Atualizar status em vez de mostrar alert
        updateStatus('Logs salvos como arquivo', 'success');
    },
    
    // Copiar logs para a √°rea de transfer√™ncia
    copyLogs() {
        const content = this.getFormattedLogs();
        
        // Usar apenas o m√©todo seguro - via background script
        try {
            if (isExtensionContextValid()) {
                updateStatus('Copiando logs...', 'info');
                
                // Enviar para o background script, que injetar√° na p√°gina principal
                chrome.runtime.sendMessage({
                    action: 'copyTextToClipboard',
                    text: content
                }, response => {
                    if (response && response.success) {
                        updateStatus('Logs copiados para a √°rea de transfer√™ncia', 'success');
                    } else {
                        const errorMsg = response ? response.error : 'Erro desconhecido';
                        updateStatus('N√£o foi poss√≠vel copiar: ' + errorMsg, 'error');
                        this.offerDownloadAlternative();
                    }
                });
            } else {
                updateStatus('Conex√£o com a extens√£o perdida', 'error');
                this.offerDownloadAlternative();
            }
        } catch (err) {
            console.error('Erro ao solicitar c√≥pia:', err);
            updateStatus('Erro ao copiar logs', 'error');
            this.offerDownloadAlternative();
        }
    },
    
    // Sugerir alternativa de download
    offerDownloadAlternative() {
        setTimeout(() => {
            updateStatus('Tente usar o bot√£o "Salvar como arquivo"', 'info');
        }, 2000);
    }
};

// ================== FUN√á√ÉO GLOBAL DE LOGGING ==================

/**
 * Fun√ß√£o global para enviar logs para o sistema
 * @param {string} message Mensagem para registrar
 * @param {string} level N√≠vel do log: INFO, DEBUG, ERROR, WARN, SUCCESS
 * @param {string} source Origem do log: SYSTEM, ANALYTICS, UI, API, etc
 */
function logToSystem(message, level = 'INFO', source = 'SYSTEM') {
    // Validar mensagem para evitar logs undefined
    if (!message) return false;
    
    // Normalizar n√≠vel e fonte
    const logLevel = (level || 'INFO').toUpperCase();
    const logSource = source || 'SYSTEM';
    
    try {
        // Se estamos na p√°gina de logs e o LogSystem est√° inicializado, usar diretamente
        if (window.IS_LOG_PAGE && window.LogSystem && window.LogSystem.initialized) {
            return LogSystem.addLog(message, logLevel, logSource);
        }

        // Verificar contexto da extens√£o e enviar para o background
        if (isExtensionContextValid()) {
            chrome.runtime.sendMessage({
                action: 'addLog',
                logMessage: message,
                logLevel: logLevel,
                logSource: logSource
            });
        }
        
        // Log no console apenas para erros
        if (logLevel === 'ERROR') {
            console.error(`[${logLevel}][${logSource}] ${message}`);
        }
        
        return true;
    } catch (e) {
        // Log de erro no console apenas
        console.error(`Erro ao processar log: ${e.message || e}`);
        return false;
    }
}

// ================== MANIPULA√á√ÉO DE EVENTOS DO CHROME ==================

// Configurar receptor de mensagens para receber logs de outros scripts
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    // Processamento da mensagem de limpeza de logs
    if (request.action === 'logsCleaned') {
        // Definir a flag local
        try {
            localStorage.setItem('logsRecentlyCleared', request.timestamp.toString());
            
            // Se estamos na p√°gina de logs, atualizar a UI
            if (window.IS_LOG_PAGE && LogSystem.initialized) {
                LogSystem.logs = []; // Limpar os logs em mem√≥ria
                LogSystem.addLog('Logs foram limpos em outra inst√¢ncia', 'INFO', 'LogSystem');
                LogSystem.updateUI();
            }
            
            sendResponse({ success: true });
        } catch (e) {
            console.warn('[LogSystem] Erro ao processar mensagem de limpeza:', e);
            sendResponse({ success: false, error: e.message });
        }
        return true;
    }
    
    // Processamento simplificado de mensagens de log
    if (request.action === 'logMessage' || request.action === 'addLog') {
        const message = request.message || request.logMessage;
        const level = request.level || request.logLevel || 'INFO';
        const source = request.source || request.logSource || 'SYSTEM';
        
        // Validar mensagem
        if (!message) {
            sendResponse({ success: false, error: 'Mensagem de log vazia' });
            return false;
        }
        
        // Se estamos na p√°gina de logs e o LogSystem est√° inicializado
        if (window.IS_LOG_PAGE && LogSystem.initialized) {
            const success = LogSystem.addLog(message, level, source);
            sendResponse({ success });
            return false;
        }
        
        // Caso contr√°rio, salvar no storage
        if (isExtensionContextValid()) {
            try {
                chrome.storage.local.get(['systemLogs'], (result) => {
                    let logs = result.systemLogs || [];
                    const now = new Date();
                    
                    // Verificar duplicidade
                    const isDuplicate = logs.some(log => 
                        log.message === message && 
                        log.level === level && 
                        log.source === source &&
                        (now.getTime() - log.timestamp) < 10000
                    );
                    
                    if (!isDuplicate) {
                        // Adicionar novo log
                        logs.push({
                            message,
                            level,
                            source,
                            date: now.toISOString(),
                            timestamp: now.getTime()
                        });
                        
                        // Limitar a quantidade de logs
                        if (logs.length > LogSystem.maxLogs) {
                            logs = logs.slice(-LogSystem.maxLogs);
                        }
                        
                        // Salvar logs atualizados
                        chrome.storage.local.set({ systemLogs: logs });
                    }
                    
                    sendResponse({ success: true });
                });
                
                return true; // Manter o canal aberto para resposta ass√≠ncrona
            } catch (error) {
                sendResponse({ success: false, error: error.message });
                return false;
            }
        }
        
        sendResponse({ success: false, error: 'Contexto de extens√£o inv√°lido' });
        return false;
    }
    
    return false;
});

// ================== INICIALIZA√á√ÉO ==================

// Fun√ß√£o para fechar a p√°gina de logs
function closeLogs() {
    try {
        // M√©todo 1: Usar o navigationManager do frame pai
        if (window.parent && window.parent.navigationManager) {
            window.parent.navigationManager.closePage();
            return;
        }
        
        // M√©todo 2: Usar API Navigation
        if (window.parent && window.parent.Navigation) {
            window.parent.Navigation.closePage();
            return;
        }
        
        // M√©todo 3: Usar postMessage
        window.parent.postMessage({ action: 'closePage' }, '*');
    } catch (error) {
        console.error('[LogSystem] Erro ao fechar p√°gina:', error);
    }
}

// Inicializa√ß√£o quando o DOM estiver carregado
document.addEventListener('DOMContentLoaded', () => {
    if (window.IS_LOG_PAGE) {
        // Atualizar refer√™ncias aos elementos da UI
        sysUI.copyBtn = document.getElementById('copy-logs') || document.getElementById('copy-log-btn');
        sysUI.saveBtn = document.getElementById('export-logs') || document.getElementById('save-log-btn');
        sysUI.clearBtn = document.getElementById('clear-logs');
        sysUI.closeBtn = document.getElementById('close-logs');
        sysUI.logContainer = document.getElementById('log-container');
        sysUI.levelFilter = document.getElementById('log-level-filter');
        
        // Inicializar o sistema de logs (sem criar log de inicializa√ß√£o)
        LogSystem.init();
        
        // Configurar eventos dos bot√µes
        if (sysUI.copyBtn) sysUI.copyBtn.addEventListener('click', () => LogSystem.copyLogs());
        if (sysUI.saveBtn) sysUI.saveBtn.addEventListener('click', () => LogSystem.downloadLogs());
        if (sysUI.clearBtn) sysUI.clearBtn.addEventListener('click', () => LogSystem.clearLogs());
        if (sysUI.closeBtn) sysUI.closeBtn.addEventListener('click', closeLogs);
        
        // Configurar evento do filtro de n√≠vel
        if (sysUI.levelFilter) {
            sysUI.levelFilter.addEventListener('change', () => {
                const selectedLevel = sysUI.levelFilter.value;
                LogSystem.filterByLevel(selectedLevel);
            });
        }
    }
});

// ================== EXPORTA√á√ÉO GLOBAL ==================

// Expor o LogSystem globalmente
window.LogSystem = LogSystem;

// Fun√ß√£o global para adicionar logs de qualquer lugar
window.addLog = (message, level, source) => {
    if (!message) return false;
    
    // Usar LogSystem se dispon√≠vel, ou fallback para logToSystem
    return window.LogSystem && window.LogSystem.initialized
        ? window.LogSystem.addLog(message, level, source)
        : logToSystem(message, level, source);
};

// Ali√°s para compatibilidade com c√≥digo existente
window.sysAddLog = window.addLog;

/**
 * Adiciona uma nova entrada de log na interface
 * @param {string} message Mensagem do log
 * @param {string} level N√≠vel do log
 * @param {string} source Origem do log
 */
function addLogEntry(message, level, source) {
    if (!message) return;

    try {
        // Verificar se temos os elementos necess√°rios
        const logContainer = document.getElementById('log-container');
        if (!logContainer) {
            console.error('Container de logs n√£o encontrado');
            return;
        }

        // Criar a entrada de log
        const logEntry = document.createElement('div');
        logEntry.className = `log-entry log-${level.toLowerCase()}`;
        logEntry.setAttribute('data-source', source);
        logEntry.setAttribute('data-level', level);

        // Timestamp
        const timestamp = new Date().toLocaleTimeString();
        
        // Montar a entrada de log com todos os dados
        logEntry.innerHTML = `
            <span class="log-time">${timestamp}</span>
            <span class="log-level ${level.toLowerCase()}">${level}</span>
            <span class="log-source">${source}</span>
            <span class="log-message">${message}</span>
        `;
        
        // Adicionar a entrada ao container
        logContainer.appendChild(logEntry);
        logContainer.scrollTop = logContainer.scrollHeight;
        
        // Atualizar os contadores
        updateLogCounters();
    } catch (error) {
        console.error('Erro ao adicionar entrada de log:', error);
    }
}

/**
 * Atualiza a exibi√ß√£o dos logs com base nos filtros
 */
function updateLogFilters() {
    const selectedSource = document.getElementById('filter-source').value;
    const selectedLevel = document.getElementById('filter-level').value;
    const searchText = document.getElementById('filter-text').value.toLowerCase();
    
    document.querySelectorAll('.log-entry').forEach(entry => {
        const entrySource = entry.getAttribute('data-source');
        const entryLevel = entry.getAttribute('data-level');
        const entryText = entry.querySelector('.log-message').textContent.toLowerCase();
        
        let shouldShow = true;
        
        // Filtrar por fonte se n√£o for "Todos"
        if (selectedSource !== 'ALL' && entrySource !== selectedSource) {
            shouldShow = false;
        }
        
        // Filtrar por n√≠vel se n√£o for "Todos"
        if (selectedLevel !== 'ALL' && entryLevel !== selectedLevel) {
            shouldShow = false;
        }
        
        // Filtrar por texto
        if (searchText && !entryText.includes(searchText)) {
            shouldShow = false;
        }
        
        entry.style.display = shouldShow ? 'flex' : 'none';
    });
    
    // Atualizar os contadores
    updateLogCounters();
}

// Fun√ß√£o para atualizar o status de opera√ß√£o sem usar alerts
function updateStatus(message, type = 'info', duration = 3000) {
    // Tentar usar a fun√ß√£o de atualiza√ß√£o de status da p√°gina principal
    try {
        // Se estamos em um iframe, enviar para o pai
        if (window !== window.top) {
            window.parent.postMessage({
                action: 'updateStatus',
                message: message,
                type: type,
                duration: duration
            }, '*');
            return true;
        }
        
        // Se estamos na p√°gina principal, tentar usar a fun√ß√£o global
        if (typeof window.updateStatusUI === 'function') {
            window.updateStatusUI(message, type, duration);
            return true;
        }
        
        // Alternativa: elemento de status na pr√≥pria p√°gina
        const statusEl = document.getElementById('status-processo');
        if (statusEl) {
            // Remover classes anteriores
            statusEl.className = 'status-processo';
            
            // Adicionar classe de acordo com o tipo
            statusEl.classList.add(type, 'visible');
            statusEl.textContent = message;
            
            // Auto-ocultar ap√≥s o tempo especificado
            setTimeout(() => {
                statusEl.classList.remove('visible');
            }, duration);
            
            return true;
        }
        
        // Se n√£o encontrou o elemento padr√£o, criar um tempor√°rio
        if (!document.getElementById('temp-status-message')) {
            const tempStatus = document.createElement('div');
            tempStatus.id = 'temp-status-message';
            tempStatus.style.cssText = `
                position: fixed;
                bottom: 20px;
                right: 20px;
                padding: 10px 15px;
                border-radius: 4px;
                color: white;
                font-weight: bold;
                z-index: 9999;
                opacity: 0;
                transition: opacity 0.3s ease;
            `;
            
            // Definir cor de acordo com o tipo
            switch(type) {
                case 'error': tempStatus.style.backgroundColor = '#f44336'; break;
                case 'success': tempStatus.style.backgroundColor = '#4caf50'; break;
                case 'warn': tempStatus.style.backgroundColor = '#ff9800'; break;
                default: tempStatus.style.backgroundColor = '#2196f3'; // info
            }
            
            tempStatus.textContent = message;
            document.body.appendChild(tempStatus);
            
            // Exibir com fade
            setTimeout(() => { tempStatus.style.opacity = '1'; }, 10);
            
            // Remover ap√≥s o tempo especificado
            setTimeout(() => {
                tempStatus.style.opacity = '0';
                setTimeout(() => {
                    if (tempStatus.parentNode) {
                        document.body.removeChild(tempStatus);
                    }
                }, 300);
            }, duration);
            
            return true;
        }
    } catch (e) {
        console.error('Erro ao atualizar status:', e);
    }
    
    // Fallback para console se n√£o conseguir atualizar UI
    console.log(`[STATUS][${type.toUpperCase()}] ${message}`);
    return false;
}

// Fun√ß√£o para verificar se uma mensagem deve ser ignorada
function shouldIgnoreMessage(message) {
    if (!message) return true;
    
    // Verificar se a mensagem est√° na lista de ignorados
    return IGNORED_MESSAGES.some(ignored => 
        message.includes(ignored) || message === ignored
    );
} 